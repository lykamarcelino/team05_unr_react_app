{"ast":null,"code":"'use strict';\n/**\r\n * Local dependencies\r\n */\n\nvar compilers = require('./lib/compilers');\n\nvar parsers = require('./lib/parsers');\n/**\r\n * Module dependencies\r\n */\n\n\nvar debug = require('debug')('expand-brackets');\n\nvar extend = require('extend-shallow');\n\nvar Snapdragon = require('snapdragon');\n\nvar toRegex = require('to-regex');\n/**\r\n * Parses the given POSIX character class `pattern` and returns a\r\n * string that can be used for creating regular expressions for matching.\r\n *\r\n * @param {String} `pattern`\r\n * @param {Object} `options`\r\n * @return {Object}\r\n * @api public\r\n */\n\n\nfunction brackets(pattern, options) {\n  debug('initializing from <%s>', __filename);\n  var res = brackets.create(pattern, options);\n  return res.output;\n}\n/**\r\n * Takes an array of strings and a POSIX character class pattern, and returns a new\r\n * array with only the strings that matched the pattern.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\r\n * //=> ['a']\r\n *\r\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\r\n * //=> ['a', 'ab']\r\n * ```\r\n * @param {Array} `arr` Array of strings to match\r\n * @param {String} `pattern` POSIX character class pattern(s)\r\n * @param {Object} `options`\r\n * @return {Array}\r\n * @api public\r\n */\n\n\nbrackets.match = function (arr, pattern, options) {\n  arr = [].concat(arr);\n  var opts = extend({}, options);\n  var isMatch = brackets.matcher(pattern, opts);\n  var len = arr.length;\n  var idx = -1;\n  var res = [];\n\n  while (++idx < len) {\n    var ele = arr[idx];\n\n    if (isMatch(ele)) {\n      res.push(ele);\n    }\n  }\n\n  if (res.length === 0) {\n    if (opts.failglob === true) {\n      throw new Error('no matches found for \"' + pattern + '\"');\n    }\n\n    if (opts.nonull === true || opts.nullglob === true) {\n      return [pattern.split('\\\\').join('')];\n    }\n  }\n\n  return res;\n};\n/**\r\n * Returns true if the specified `string` matches the given\r\n * brackets `pattern`.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n *\r\n * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\r\n * //=> true\r\n * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\r\n * //=> false\r\n * ```\r\n * @param {String} `string` String to match\r\n * @param {String} `pattern` Poxis pattern\r\n * @param {String} `options`\r\n * @return {Boolean}\r\n * @api public\r\n */\n\n\nbrackets.isMatch = function (str, pattern, options) {\n  return brackets.matcher(pattern, options)(str);\n};\n/**\r\n * Takes a POSIX character class pattern and returns a matcher function. The returned\r\n * function takes the string to match as its only argument.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * var isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\r\n *\r\n * console.log(isMatch('a.a'));\r\n * //=> false\r\n * console.log(isMatch('a.A'));\r\n * //=> true\r\n * ```\r\n * @param {String} `pattern` Poxis pattern\r\n * @param {String} `options`\r\n * @return {Boolean}\r\n * @api public\r\n */\n\n\nbrackets.matcher = function (pattern, options) {\n  var re = brackets.makeRe(pattern, options);\n  return function (str) {\n    return re.test(str);\n  };\n};\n/**\r\n * Create a regular expression from the given `pattern`.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * var re = brackets.makeRe('[[:alpha:]]');\r\n * console.log(re);\r\n * //=> /^(?:[a-zA-Z])$/\r\n * ```\r\n * @param {String} `pattern` The pattern to convert to regex.\r\n * @param {Object} `options`\r\n * @return {RegExp}\r\n * @api public\r\n */\n\n\nbrackets.makeRe = function (pattern, options) {\n  var res = brackets.create(pattern, options);\n  var opts = extend({\n    strictErrors: false\n  }, options);\n  return toRegex(res.output, opts);\n};\n/**\r\n * Parses the given POSIX character class `pattern` and returns an object\r\n * with the compiled `output` and optional source `map`.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * console.log(brackets('[[:alpha:]]'));\r\n * // { options: { source: 'string' },\r\n * //   input: '[[:alpha:]]',\r\n * //   state: {},\r\n * //   compilers:\r\n * //    { eos: [Function],\r\n * //      noop: [Function],\r\n * //      bos: [Function],\r\n * //      not: [Function],\r\n * //      escape: [Function],\r\n * //      text: [Function],\r\n * //      posix: [Function],\r\n * //      bracket: [Function],\r\n * //      'bracket.open': [Function],\r\n * //      'bracket.inner': [Function],\r\n * //      'bracket.literal': [Function],\r\n * //      'bracket.close': [Function] },\r\n * //   output: '[a-zA-Z]',\r\n * //   ast:\r\n * //    { type: 'root',\r\n * //      errors: [],\r\n * //      nodes: [ [Object], [Object], [Object] ] },\r\n * //   parsingErrors: [] }\r\n * ```\r\n * @param {String} `pattern`\r\n * @param {Object} `options`\r\n * @return {Object}\r\n * @api public\r\n */\n\n\nbrackets.create = function (pattern, options) {\n  var snapdragon = options && options.snapdragon || new Snapdragon(options);\n  compilers(snapdragon);\n  parsers(snapdragon);\n  var ast = snapdragon.parse(pattern, options);\n  ast.input = pattern;\n  var res = snapdragon.compile(ast, options);\n  res.input = pattern;\n  return res;\n};\n/**\r\n * Expose `brackets` constructor, parsers and compilers\r\n */\n\n\nbrackets.compilers = compilers;\nbrackets.parsers = parsers;\n/**\r\n * Expose `brackets`\r\n * @type {Function}\r\n */\n\nmodule.exports = brackets;","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/expand-brackets/index.js"],"names":["compilers","require","parsers","debug","extend","Snapdragon","toRegex","brackets","pattern","options","__filename","res","create","output","match","arr","concat","opts","isMatch","matcher","len","length","idx","ele","push","failglob","Error","nonull","nullglob","split","join","str","re","makeRe","test","strictErrors","snapdragon","ast","parse","input","compile","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Local dependencies\r\n */\r\n\r\nvar compilers = require('./lib/compilers');\r\nvar parsers = require('./lib/parsers');\r\n\r\n/**\r\n * Module dependencies\r\n */\r\n\r\nvar debug = require('debug')('expand-brackets');\r\nvar extend = require('extend-shallow');\r\nvar Snapdragon = require('snapdragon');\r\nvar toRegex = require('to-regex');\r\n\r\n/**\r\n * Parses the given POSIX character class `pattern` and returns a\r\n * string that can be used for creating regular expressions for matching.\r\n *\r\n * @param {String} `pattern`\r\n * @param {Object} `options`\r\n * @return {Object}\r\n * @api public\r\n */\r\n\r\nfunction brackets(pattern, options) {\r\n  debug('initializing from <%s>', __filename);\r\n  var res = brackets.create(pattern, options);\r\n  return res.output;\r\n}\r\n\r\n/**\r\n * Takes an array of strings and a POSIX character class pattern, and returns a new\r\n * array with only the strings that matched the pattern.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\r\n * //=> ['a']\r\n *\r\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\r\n * //=> ['a', 'ab']\r\n * ```\r\n * @param {Array} `arr` Array of strings to match\r\n * @param {String} `pattern` POSIX character class pattern(s)\r\n * @param {Object} `options`\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nbrackets.match = function(arr, pattern, options) {\r\n  arr = [].concat(arr);\r\n  var opts = extend({}, options);\r\n  var isMatch = brackets.matcher(pattern, opts);\r\n  var len = arr.length;\r\n  var idx = -1;\r\n  var res = [];\r\n\r\n  while (++idx < len) {\r\n    var ele = arr[idx];\r\n    if (isMatch(ele)) {\r\n      res.push(ele);\r\n    }\r\n  }\r\n\r\n  if (res.length === 0) {\r\n    if (opts.failglob === true) {\r\n      throw new Error('no matches found for \"' + pattern + '\"');\r\n    }\r\n\r\n    if (opts.nonull === true || opts.nullglob === true) {\r\n      return [pattern.split('\\\\').join('')];\r\n    }\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Returns true if the specified `string` matches the given\r\n * brackets `pattern`.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n *\r\n * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\r\n * //=> true\r\n * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\r\n * //=> false\r\n * ```\r\n * @param {String} `string` String to match\r\n * @param {String} `pattern` Poxis pattern\r\n * @param {String} `options`\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nbrackets.isMatch = function(str, pattern, options) {\r\n  return brackets.matcher(pattern, options)(str);\r\n};\r\n\r\n/**\r\n * Takes a POSIX character class pattern and returns a matcher function. The returned\r\n * function takes the string to match as its only argument.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * var isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\r\n *\r\n * console.log(isMatch('a.a'));\r\n * //=> false\r\n * console.log(isMatch('a.A'));\r\n * //=> true\r\n * ```\r\n * @param {String} `pattern` Poxis pattern\r\n * @param {String} `options`\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nbrackets.matcher = function(pattern, options) {\r\n  var re = brackets.makeRe(pattern, options);\r\n  return function(str) {\r\n    return re.test(str);\r\n  };\r\n};\r\n\r\n/**\r\n * Create a regular expression from the given `pattern`.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * var re = brackets.makeRe('[[:alpha:]]');\r\n * console.log(re);\r\n * //=> /^(?:[a-zA-Z])$/\r\n * ```\r\n * @param {String} `pattern` The pattern to convert to regex.\r\n * @param {Object} `options`\r\n * @return {RegExp}\r\n * @api public\r\n */\r\n\r\nbrackets.makeRe = function(pattern, options) {\r\n  var res = brackets.create(pattern, options);\r\n  var opts = extend({strictErrors: false}, options);\r\n  return toRegex(res.output, opts);\r\n};\r\n\r\n/**\r\n * Parses the given POSIX character class `pattern` and returns an object\r\n * with the compiled `output` and optional source `map`.\r\n *\r\n * ```js\r\n * var brackets = require('expand-brackets');\r\n * console.log(brackets('[[:alpha:]]'));\r\n * // { options: { source: 'string' },\r\n * //   input: '[[:alpha:]]',\r\n * //   state: {},\r\n * //   compilers:\r\n * //    { eos: [Function],\r\n * //      noop: [Function],\r\n * //      bos: [Function],\r\n * //      not: [Function],\r\n * //      escape: [Function],\r\n * //      text: [Function],\r\n * //      posix: [Function],\r\n * //      bracket: [Function],\r\n * //      'bracket.open': [Function],\r\n * //      'bracket.inner': [Function],\r\n * //      'bracket.literal': [Function],\r\n * //      'bracket.close': [Function] },\r\n * //   output: '[a-zA-Z]',\r\n * //   ast:\r\n * //    { type: 'root',\r\n * //      errors: [],\r\n * //      nodes: [ [Object], [Object], [Object] ] },\r\n * //   parsingErrors: [] }\r\n * ```\r\n * @param {String} `pattern`\r\n * @param {Object} `options`\r\n * @return {Object}\r\n * @api public\r\n */\r\n\r\nbrackets.create = function(pattern, options) {\r\n  var snapdragon = (options && options.snapdragon) || new Snapdragon(options);\r\n  compilers(snapdragon);\r\n  parsers(snapdragon);\r\n\r\n  var ast = snapdragon.parse(pattern, options);\r\n  ast.input = pattern;\r\n  var res = snapdragon.compile(ast, options);\r\n  res.input = pattern;\r\n  return res;\r\n};\r\n\r\n/**\r\n * Expose `brackets` constructor, parsers and compilers\r\n */\r\n\r\nbrackets.compilers = compilers;\r\nbrackets.parsers = parsers;\r\n\r\n/**\r\n * Expose `brackets`\r\n * @type {Function}\r\n */\r\n\r\nmodule.exports = brackets;\r\n"]},"metadata":{},"sourceType":"script"}