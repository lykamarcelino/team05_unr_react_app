{"ast":null,"code":"/*!\r\n * map-cache <https://github.com/jonschlinkert/map-cache>\r\n *\r\n * Copyright (c) 2015, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n/**\r\n * Expose `MapCache`\r\n */\n\nmodule.exports = MapCache;\n/**\r\n * Creates a cache object to store key/value pairs.\r\n *\r\n * ```js\r\n * var cache = new MapCache();\r\n * ```\r\n *\r\n * @api public\r\n */\n\nfunction MapCache(data) {\n  this.__data__ = data || {};\n}\n/**\r\n * Adds `value` to `key` on the cache.\r\n *\r\n * ```js\r\n * cache.set('foo', 'bar');\r\n * ```\r\n *\r\n * @param {String} `key` The key of the value to cache.\r\n * @param {*} `value` The value to cache.\r\n * @returns {Object} Returns the `Cache` object for chaining.\r\n * @api public\r\n */\n\n\nMapCache.prototype.set = function mapSet(key, value) {\n  if (key !== '__proto__') {\n    this.__data__[key] = value;\n  }\n\n  return this;\n};\n/**\r\n * Gets the cached value for `key`.\r\n *\r\n * ```js\r\n * cache.get('foo');\r\n * //=> 'bar'\r\n * ```\r\n *\r\n * @param {String} `key` The key of the value to get.\r\n * @returns {*} Returns the cached value.\r\n * @api public\r\n */\n\n\nMapCache.prototype.get = function mapGet(key) {\n  return key === '__proto__' ? undefined : this.__data__[key];\n};\n/**\r\n * Checks if a cached value for `key` exists.\r\n *\r\n * ```js\r\n * cache.has('foo');\r\n * //=> true\r\n * ```\r\n *\r\n * @param {String} `key` The key of the entry to check.\r\n * @returns {Boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n * @api public\r\n */\n\n\nMapCache.prototype.has = function mapHas(key) {\n  return key !== '__proto__' && hasOwn.call(this.__data__, key);\n};\n/**\r\n * Removes `key` and its value from the cache.\r\n *\r\n * ```js\r\n * cache.del('foo');\r\n * ```\r\n * @title .del\r\n * @param {String} `key` The key of the value to remove.\r\n * @returns {Boolean} Returns `true` if the entry was removed successfully, else `false`.\r\n * @api public\r\n */\n\n\nMapCache.prototype.del = function mapDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n};","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/map-cache/index.js"],"names":["hasOwn","Object","prototype","hasOwnProperty","module","exports","MapCache","data","__data__","set","mapSet","key","value","get","mapGet","undefined","has","mapHas","call","del","mapDelete"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAA9B;AAEA;;;;AAIAC,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;;;;;;;;;;AAUA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,OAAKC,QAAL,GAAgBD,IAAI,IAAI,EAAxB;AACD;AAED;;;;;;;;;;;;;;AAaAD,QAAQ,CAACJ,SAAT,CAAmBO,GAAnB,GAAyB,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;AACnD,MAAID,GAAG,KAAK,WAAZ,EAAyB;AACvB,SAAKH,QAAL,CAAcG,GAAd,IAAqBC,KAArB;AACD;;AACD,SAAO,IAAP;AACD,CALD;AAOA;;;;;;;;;;;;;;AAaAN,QAAQ,CAACJ,SAAT,CAAmBW,GAAnB,GAAyB,SAASC,MAAT,CAAgBH,GAAhB,EAAqB;AAC5C,SAAOA,GAAG,KAAK,WAAR,GAAsBI,SAAtB,GAAkC,KAAKP,QAAL,CAAcG,GAAd,CAAzC;AACD,CAFD;AAIA;;;;;;;;;;;;;;AAaAL,QAAQ,CAACJ,SAAT,CAAmBc,GAAnB,GAAyB,SAASC,MAAT,CAAgBN,GAAhB,EAAqB;AAC5C,SAAOA,GAAG,KAAK,WAAR,IAAuBX,MAAM,CAACkB,IAAP,CAAY,KAAKV,QAAjB,EAA2BG,GAA3B,CAA9B;AACD,CAFD;AAIA;;;;;;;;;;;;;AAYAL,QAAQ,CAACJ,SAAT,CAAmBiB,GAAnB,GAAyB,SAASC,SAAT,CAAmBT,GAAnB,EAAwB;AAC/C,SAAO,KAAKK,GAAL,CAASL,GAAT,KAAiB,OAAO,KAAKH,QAAL,CAAcG,GAAd,CAA/B;AACD,CAFD","sourcesContent":["/*!\r\n * map-cache <https://github.com/jonschlinkert/map-cache>\r\n *\r\n * Copyright (c) 2015, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n'use strict';\r\n\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\n\r\n/**\r\n * Expose `MapCache`\r\n */\r\n\r\nmodule.exports = MapCache;\r\n\r\n/**\r\n * Creates a cache object to store key/value pairs.\r\n *\r\n * ```js\r\n * var cache = new MapCache();\r\n * ```\r\n *\r\n * @api public\r\n */\r\n\r\nfunction MapCache(data) {\r\n  this.__data__ = data || {};\r\n}\r\n\r\n/**\r\n * Adds `value` to `key` on the cache.\r\n *\r\n * ```js\r\n * cache.set('foo', 'bar');\r\n * ```\r\n *\r\n * @param {String} `key` The key of the value to cache.\r\n * @param {*} `value` The value to cache.\r\n * @returns {Object} Returns the `Cache` object for chaining.\r\n * @api public\r\n */\r\n\r\nMapCache.prototype.set = function mapSet(key, value) {\r\n  if (key !== '__proto__') {\r\n    this.__data__[key] = value;\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Gets the cached value for `key`.\r\n *\r\n * ```js\r\n * cache.get('foo');\r\n * //=> 'bar'\r\n * ```\r\n *\r\n * @param {String} `key` The key of the value to get.\r\n * @returns {*} Returns the cached value.\r\n * @api public\r\n */\r\n\r\nMapCache.prototype.get = function mapGet(key) {\r\n  return key === '__proto__' ? undefined : this.__data__[key];\r\n};\r\n\r\n/**\r\n * Checks if a cached value for `key` exists.\r\n *\r\n * ```js\r\n * cache.has('foo');\r\n * //=> true\r\n * ```\r\n *\r\n * @param {String} `key` The key of the entry to check.\r\n * @returns {Boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n * @api public\r\n */\r\n\r\nMapCache.prototype.has = function mapHas(key) {\r\n  return key !== '__proto__' && hasOwn.call(this.__data__, key);\r\n};\r\n\r\n/**\r\n * Removes `key` and its value from the cache.\r\n *\r\n * ```js\r\n * cache.del('foo');\r\n * ```\r\n * @title .del\r\n * @param {String} `key` The key of the value to remove.\r\n * @returns {Boolean} Returns `true` if the entry was removed successfully, else `false`.\r\n * @api public\r\n */\r\n\r\nMapCache.prototype.del = function mapDelete(key) {\r\n  return this.has(key) && delete this.__data__[key];\r\n};\r\n"]},"metadata":{},"sourceType":"script"}