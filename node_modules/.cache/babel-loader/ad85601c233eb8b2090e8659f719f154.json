{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stringLength() {\n  const data = _interopRequireDefault(require('string-length'));\n\n  _stringLength = function _stringLength() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst RUNNING_TEXT = ' RUNS ';\nconst RUNNING = _chalk().default.reset.inverse.yellow.bold(RUNNING_TEXT) + ' ';\n/**\r\n * This class is a perf optimization for sorting the list of currently\r\n * running tests. It tries to keep tests in the same positions without\r\n * shifting the whole list.\r\n */\n\nclass CurrentTestList {\n  constructor() {\n    _defineProperty(this, '_array', void 0);\n\n    this._array = [];\n  }\n\n  add(testPath, config) {\n    const index = this._array.indexOf(null);\n\n    const record = {\n      config,\n      testPath\n    };\n\n    if (index !== -1) {\n      this._array[index] = record;\n    } else {\n      this._array.push(record);\n    }\n  }\n\n  delete(testPath) {\n    const record = this._array.find(record => record !== null && record.testPath === testPath);\n\n    this._array[this._array.indexOf(record || null)] = null;\n  }\n\n  get() {\n    return this._array;\n  }\n\n}\n/**\r\n * A class that generates the CLI status of currently running tests\r\n * and also provides an ANSI escape sequence to remove status lines\r\n * from the terminal.\r\n */\n\n\nclass Status {\n  constructor() {\n    _defineProperty(this, '_cache', void 0);\n\n    _defineProperty(this, '_callback', void 0);\n\n    _defineProperty(this, '_currentTests', void 0);\n\n    _defineProperty(this, '_done', void 0);\n\n    _defineProperty(this, '_emitScheduled', void 0);\n\n    _defineProperty(this, '_estimatedTime', void 0);\n\n    _defineProperty(this, '_interval', void 0);\n\n    _defineProperty(this, '_aggregatedResults', void 0);\n\n    _defineProperty(this, '_showStatus', void 0);\n\n    this._cache = null;\n    this._currentTests = new CurrentTestList();\n    this._done = false;\n    this._emitScheduled = false;\n    this._estimatedTime = 0;\n    this._showStatus = false;\n  }\n\n  onChange(callback) {\n    this._callback = callback;\n  }\n\n  runStarted(aggregatedResults, options) {\n    this._estimatedTime = options && options.estimatedTime || 0;\n    this._showStatus = options && options.showStatus;\n    this._interval = setInterval(() => this._tick(), 1000);\n    this._aggregatedResults = aggregatedResults;\n\n    this._debouncedEmit();\n  }\n\n  runFinished() {\n    this._done = true;\n    if (this._interval) clearInterval(this._interval);\n\n    this._emit();\n  }\n\n  testStarted(testPath, config) {\n    this._currentTests.add(testPath, config);\n\n    if (!this._showStatus) {\n      this._emit();\n    } else {\n      this._debouncedEmit();\n    }\n  }\n\n  testFinished(_config, testResult, aggregatedResults) {\n    const testFilePath = testResult.testFilePath;\n    this._aggregatedResults = aggregatedResults;\n\n    this._currentTests.delete(testFilePath);\n\n    this._debouncedEmit();\n  }\n\n  get() {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    if (this._done) {\n      return {\n        clear: '',\n        content: ''\n      };\n    }\n\n    const width = process.stdout.columns;\n    let content = '\\n';\n\n    this._currentTests.get().forEach(record => {\n      if (record) {\n        const config = record.config,\n              testPath = record.testPath;\n        const projectDisplayName = config.displayName ? (0, _utils.printDisplayName)(config) + ' ' : '';\n        const prefix = RUNNING + projectDisplayName;\n        content += (0, _utils.wrapAnsiString)(prefix + (0, _utils.trimAndFormatPath)((0, _stringLength().default)(prefix), config, testPath, width), width) + '\\n';\n      }\n    });\n\n    if (this._showStatus && this._aggregatedResults) {\n      content += '\\n' + (0, _utils.getSummary)(this._aggregatedResults, {\n        estimatedTime: this._estimatedTime,\n        roundTime: true,\n        width\n      });\n    }\n\n    let height = 0;\n\n    for (let i = 0; i < content.length; i++) {\n      if (content[i] === '\\n') {\n        height++;\n      }\n    }\n\n    const clear = '\\r\\x1B[K\\r\\x1B[1A'.repeat(height);\n    return this._cache = {\n      clear,\n      content\n    };\n  }\n\n  _emit() {\n    this._cache = null;\n    if (this._callback) this._callback();\n  }\n\n  _debouncedEmit() {\n    if (!this._emitScheduled) {\n      // Perf optimization to avoid two separate renders When\n      // one test finishes and another test starts executing.\n      this._emitScheduled = true;\n      setTimeout(() => {\n        this._emit();\n\n        this._emitScheduled = false;\n      }, 100);\n    }\n  }\n\n  _tick() {\n    this._debouncedEmit();\n  }\n\n}\n\nexports.default = Status;","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/@jest/reporters/build/Status.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_stringLength","_utils","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","RUNNING_TEXT","RUNNING","reset","inverse","yellow","bold","CurrentTestList","constructor","_array","add","testPath","config","index","indexOf","record","push","delete","find","get","Status","_cache","_currentTests","_done","_emitScheduled","_estimatedTime","_showStatus","onChange","callback","_callback","runStarted","aggregatedResults","options","estimatedTime","showStatus","_interval","setInterval","_tick","_aggregatedResults","_debouncedEmit","runFinished","clearInterval","_emit","testStarted","testFinished","_config","testResult","testFilePath","clear","content","width","process","stdout","columns","forEach","projectDisplayName","displayName","printDisplayName","prefix","wrapAnsiString","trimAndFormatPath","getSummary","roundTime","height","i","length","repeat","setTimeout"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nfunction _chalk() {\r\n  const data = _interopRequireDefault(require('chalk'));\r\n\r\n  _chalk = function _chalk() {\r\n    return data;\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nfunction _stringLength() {\r\n  const data = _interopRequireDefault(require('string-length'));\r\n\r\n  _stringLength = function _stringLength() {\r\n    return data;\r\n  };\r\n\r\n  return data;\r\n}\r\n\r\nvar _utils = require('./utils');\r\n\r\nfunction _interopRequireDefault(obj) {\r\n  return obj && obj.__esModule ? obj : {default: obj};\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n  return obj;\r\n}\r\n\r\nconst RUNNING_TEXT = ' RUNS ';\r\nconst RUNNING = _chalk().default.reset.inverse.yellow.bold(RUNNING_TEXT) + ' ';\r\n/**\r\n * This class is a perf optimization for sorting the list of currently\r\n * running tests. It tries to keep tests in the same positions without\r\n * shifting the whole list.\r\n */\r\n\r\nclass CurrentTestList {\r\n  constructor() {\r\n    _defineProperty(this, '_array', void 0);\r\n\r\n    this._array = [];\r\n  }\r\n\r\n  add(testPath, config) {\r\n    const index = this._array.indexOf(null);\r\n\r\n    const record = {\r\n      config,\r\n      testPath\r\n    };\r\n\r\n    if (index !== -1) {\r\n      this._array[index] = record;\r\n    } else {\r\n      this._array.push(record);\r\n    }\r\n  }\r\n\r\n  delete(testPath) {\r\n    const record = this._array.find(\r\n      record => record !== null && record.testPath === testPath\r\n    );\r\n\r\n    this._array[this._array.indexOf(record || null)] = null;\r\n  }\r\n\r\n  get() {\r\n    return this._array;\r\n  }\r\n}\r\n/**\r\n * A class that generates the CLI status of currently running tests\r\n * and also provides an ANSI escape sequence to remove status lines\r\n * from the terminal.\r\n */\r\n\r\nclass Status {\r\n  constructor() {\r\n    _defineProperty(this, '_cache', void 0);\r\n\r\n    _defineProperty(this, '_callback', void 0);\r\n\r\n    _defineProperty(this, '_currentTests', void 0);\r\n\r\n    _defineProperty(this, '_done', void 0);\r\n\r\n    _defineProperty(this, '_emitScheduled', void 0);\r\n\r\n    _defineProperty(this, '_estimatedTime', void 0);\r\n\r\n    _defineProperty(this, '_interval', void 0);\r\n\r\n    _defineProperty(this, '_aggregatedResults', void 0);\r\n\r\n    _defineProperty(this, '_showStatus', void 0);\r\n\r\n    this._cache = null;\r\n    this._currentTests = new CurrentTestList();\r\n    this._done = false;\r\n    this._emitScheduled = false;\r\n    this._estimatedTime = 0;\r\n    this._showStatus = false;\r\n  }\r\n\r\n  onChange(callback) {\r\n    this._callback = callback;\r\n  }\r\n\r\n  runStarted(aggregatedResults, options) {\r\n    this._estimatedTime = (options && options.estimatedTime) || 0;\r\n    this._showStatus = options && options.showStatus;\r\n    this._interval = setInterval(() => this._tick(), 1000);\r\n    this._aggregatedResults = aggregatedResults;\r\n\r\n    this._debouncedEmit();\r\n  }\r\n\r\n  runFinished() {\r\n    this._done = true;\r\n    if (this._interval) clearInterval(this._interval);\r\n\r\n    this._emit();\r\n  }\r\n\r\n  testStarted(testPath, config) {\r\n    this._currentTests.add(testPath, config);\r\n\r\n    if (!this._showStatus) {\r\n      this._emit();\r\n    } else {\r\n      this._debouncedEmit();\r\n    }\r\n  }\r\n\r\n  testFinished(_config, testResult, aggregatedResults) {\r\n    const testFilePath = testResult.testFilePath;\r\n    this._aggregatedResults = aggregatedResults;\r\n\r\n    this._currentTests.delete(testFilePath);\r\n\r\n    this._debouncedEmit();\r\n  }\r\n\r\n  get() {\r\n    if (this._cache) {\r\n      return this._cache;\r\n    }\r\n\r\n    if (this._done) {\r\n      return {\r\n        clear: '',\r\n        content: ''\r\n      };\r\n    }\r\n\r\n    const width = process.stdout.columns;\r\n    let content = '\\n';\r\n\r\n    this._currentTests.get().forEach(record => {\r\n      if (record) {\r\n        const config = record.config,\r\n          testPath = record.testPath;\r\n        const projectDisplayName = config.displayName\r\n          ? (0, _utils.printDisplayName)(config) + ' '\r\n          : '';\r\n        const prefix = RUNNING + projectDisplayName;\r\n        content +=\r\n          (0, _utils.wrapAnsiString)(\r\n            prefix +\r\n              (0, _utils.trimAndFormatPath)(\r\n                (0, _stringLength().default)(prefix),\r\n                config,\r\n                testPath,\r\n                width\r\n              ),\r\n            width\r\n          ) + '\\n';\r\n      }\r\n    });\r\n\r\n    if (this._showStatus && this._aggregatedResults) {\r\n      content +=\r\n        '\\n' +\r\n        (0, _utils.getSummary)(this._aggregatedResults, {\r\n          estimatedTime: this._estimatedTime,\r\n          roundTime: true,\r\n          width\r\n        });\r\n    }\r\n\r\n    let height = 0;\r\n\r\n    for (let i = 0; i < content.length; i++) {\r\n      if (content[i] === '\\n') {\r\n        height++;\r\n      }\r\n    }\r\n\r\n    const clear = '\\r\\x1B[K\\r\\x1B[1A'.repeat(height);\r\n    return (this._cache = {\r\n      clear,\r\n      content\r\n    });\r\n  }\r\n\r\n  _emit() {\r\n    this._cache = null;\r\n    if (this._callback) this._callback();\r\n  }\r\n\r\n  _debouncedEmit() {\r\n    if (!this._emitScheduled) {\r\n      // Perf optimization to avoid two separate renders When\r\n      // one test finishes and another test starts executing.\r\n      this._emitScheduled = true;\r\n      setTimeout(() => {\r\n        this._emit();\r\n\r\n        this._emitScheduled = false;\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  _tick() {\r\n    this._debouncedEmit();\r\n  }\r\n}\r\n\r\nexports.default = Status;\r\n"]},"metadata":{},"sourceType":"script"}