{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Liliana\\\\Documents\\\\AFinalUpdate\\\\team05_unr_react_app\\\\src\\\\components\\\\graphDisplays\\\\GraphDisplay.js\";\nimport React from \"react\";\nimport BarGraph from \"../graphComponents/BarGraph\";\nimport LineGraph from \"../graphComponents/LineGraph\";\nimport ScatterplotGraph from \"../graphComponents/ScatterplotGraph\";\nimport PieGraph from \"../graphComponents/PieGraph\";\nexport default class GraphDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graphName: this.props.graphName,\n      numPred: this.props.numPred,\n      graphType: this.props.graphType,\n      predFrequency: this.props.predFrequency,\n      showTable: this.props.showTable,\n      from: this.props.from,\n      labels: null,\n      dataLabel: null,\n      data: null,\n      colors: null,\n      legendPosition: null,\n      title: null,\n      xAxisLabel: null,\n      yAxisLabel: null,\n      showLegend: null,\n      dataFetched: false,\n      varSet: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:8080/getGeneralGraph', {\n      method: 'GET',\n      headers: {\n        'graphName': this.state.graphName,\n        'numPred': this.state.numPred,\n        'graphType': this.state.graphType,\n        'predFrequency': this.state.predFrequency,\n        'from': this.state.from\n      }\n    }).then(res => res.json()).then(jsonResponse => {\n      this.setState({\n        labels: jsonResponse.labels,\n        dataLabel: jsonResponse.dataLabel,\n        data: jsonResponse.data,\n        colors: jsonResponse.colors,\n        legendPosition: jsonResponse.legendPosition,\n        title: jsonResponse.title,\n        xAxisLabel: jsonResponse.xAxisLabel,\n        yAxisLabel: jsonResponse.yAxisLabel,\n        showLegend: jsonResponse.showLegend\n      });\n      console.log(\"fetch was done\");\n      console.log(this.state);\n      this.setState({\n        dataFetched: true\n      });\n    }).catch(function (error) {\n      console.log('There has been a problem with your fetch operation: ' + error.message);\n      throw error;\n    });\n  }\n\n  render() {\n    if (this.state.graphType === \"Scatter\") {\n      var chartData = {\n        labels: this.state.labels,\n        datasets: [{\n          label: this.state.dataLabel,\n          data: this.state.data,\n          backgroundColor: this.state.colors,\n          pointRadius: 15,\n          fill: false,\n          showLine: false\n        }]\n      };\n    } else if (this.state.graphType === \"Line\") {\n      var chartData = {\n        labels: this.state.labels,\n        datasets: [{\n          label: this.state.dataLabel,\n          data: this.state.data,\n          backgroundColor: this.state.colors,\n          fill: false\n        }]\n      };\n    } else {\n      var chartData = {\n        labels: this.state.labels,\n        datasets: [{\n          label: this.state.dataLabel,\n          data: this.state.data,\n          backgroundColor: this.state.colors\n        }]\n      };\n    }\n\n    if (this.state.dataFetched) {\n      this.setState({\n        varSet: true,\n        dataFetched: false\n      });\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        alignContent: 'center',\n        paddingTop: '50px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.state.varSet && this.state.graphType === \"Bar\" && React.createElement(BarGraph, {\n      chartData: chartData,\n      title: this.state.title,\n      xAxisLabel: this.state.xAxisLabel,\n      yAxisLabel: this.state.yAxisLabel,\n      showLegend: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), this.state.varSet && this.state.graphType === \"Line\" && React.createElement(LineGraph, {\n      chartData: chartData,\n      title: this.state.title,\n      xAxisLabel: this.state.xAxisLabel,\n      yAxisLabel: this.state.yAxisLabel,\n      showLegend: this.state.showLegend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), this.state.varSet && this.state.graphType === \"Scatter\" && React.createElement(ScatterplotGraph, {\n      chartData: chartData,\n      title: this.state.title,\n      xAxisLabel: this.state.xAxisLabel,\n      yAxisLabel: this.state.yAxisLabel,\n      showLegend: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), this.state.varSet && this.state.graphType === \"Pie\" && React.createElement(PieGraph, {\n      chartData: chartData,\n      title: this.state.title,\n      showLegend: this.state.showLegend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), !this.state.varSet && React.createElement(\"div\", {\n      style: {\n        marginTop: \"200px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \" loading... \"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Liliana/Documents/AFinalUpdate/team05_unr_react_app/src/components/graphDisplays/GraphDisplay.js"],"names":["React","BarGraph","LineGraph","ScatterplotGraph","PieGraph","GraphDisplay","Component","constructor","props","state","graphName","numPred","graphType","predFrequency","showTable","from","labels","dataLabel","data","colors","legendPosition","title","xAxisLabel","yAxisLabel","showLegend","dataFetched","varSet","componentDidMount","fetch","method","headers","then","res","json","jsonResponse","setState","console","log","catch","error","message","render","chartData","datasets","label","backgroundColor","pointRadius","fill","showLine","textAlign","alignContent","paddingTop","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport BarGraph from \"../graphComponents/BarGraph\";\r\nimport LineGraph from \"../graphComponents/LineGraph\";\r\nimport ScatterplotGraph from \"../graphComponents/ScatterplotGraph\";\r\nimport PieGraph from \"../graphComponents/PieGraph\";\r\n\r\nexport default class GraphDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            graphName: this.props.graphName,\r\n            numPred: this.props.numPred,\r\n            graphType: this.props.graphType,\r\n            predFrequency: this.props.predFrequency,\r\n            showTable: this.props.showTable,\r\n            from: this.props.from,\r\n            labels: null,\r\n            dataLabel: null,\r\n            data: null,\r\n            colors: null,\r\n            legendPosition: null,\r\n            title: null,\r\n            xAxisLabel: null,\r\n            yAxisLabel: null,\r\n            showLegend: null,\r\n            dataFetched: false,\r\n            varSet: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/getGeneralGraph', {\r\n            method: 'GET',\r\n            headers: {\r\n                'graphName': this.state.graphName,\r\n                'numPred': this.state.numPred,\r\n                'graphType': this.state.graphType,\r\n                'predFrequency': this.state.predFrequency,\r\n                'from': this.state.from,\r\n            }})\r\n            .then(res => res.json())\r\n            .then(jsonResponse => {\r\n                this.setState({\r\n                    labels: jsonResponse.labels,\r\n                    dataLabel: jsonResponse.dataLabel,\r\n                    data:jsonResponse.data,\r\n                    colors: jsonResponse.colors,\r\n                    legendPosition: jsonResponse.legendPosition,\r\n                    title : jsonResponse.title,\r\n                    xAxisLabel: jsonResponse.xAxisLabel,\r\n                    yAxisLabel: jsonResponse.yAxisLabel,\r\n                    showLegend: jsonResponse.showLegend,\r\n                })\r\n                console.log(\"fetch was done\")\r\n                console.log(this.state)\r\n                this.setState({dataFetched: true})\r\n            })\r\n            .catch(function(error) {\r\n                console.log('There has been a problem with your fetch operation: ' + error.message);\r\n                throw error;\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.graphType === \"Scatter\") {\r\n            var chartData = {\r\n                labels: this.state.labels,\r\n                datasets: [\r\n                    {\r\n                        label: this.state.dataLabel,\r\n                        data: this.state.data,\r\n                        backgroundColor: this.state.colors,\r\n                        pointRadius: 15,\r\n                        fill: false,\r\n                        showLine: false\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        else if (this.state.graphType === \"Line\"){\r\n            var chartData = {\r\n                labels: this.state.labels,\r\n                datasets: [\r\n                    {\r\n                        label: this.state.dataLabel,\r\n                        data: this.state.data,\r\n                        backgroundColor: this.state.colors,\r\n                        fill: false,\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        else {\r\n            var chartData = {\r\n                labels: this.state.labels,\r\n                datasets: [\r\n                    {\r\n                        label: this.state.dataLabel,\r\n                        data: this.state.data,\r\n                        backgroundColor: this.state.colors,\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n\r\n    if(this.state.dataFetched){\r\n        this.setState({varSet: true, dataFetched: false})\r\n    }\r\n\r\n    return(\r\n        <div style={{textAlign: 'center', alignContent:'center', paddingTop: '50px'}}>\r\n            {this.state.varSet && this.state.graphType === \"Bar\" &&\r\n                <BarGraph\r\n                    chartData = {chartData}\r\n                    title = {this.state.title}\r\n                    xAxisLabel = {this.state.xAxisLabel}\r\n                    yAxisLabel = {this.state.yAxisLabel}\r\n                    showLegend = {false}\r\n                />\r\n            }\r\n            {this.state.varSet && this.state.graphType === \"Line\" &&\r\n            <LineGraph\r\n                chartData = {chartData}\r\n                title = {this.state.title}\r\n                xAxisLabel = {this.state.xAxisLabel}\r\n                yAxisLabel = {this.state.yAxisLabel}\r\n                showLegend = {this.state.showLegend}\r\n            />\r\n            }\r\n            {this.state.varSet && this.state.graphType === \"Scatter\" &&\r\n            <ScatterplotGraph\r\n                chartData = {chartData}\r\n                title = {this.state.title}\r\n                xAxisLabel = {this.state.xAxisLabel}\r\n                yAxisLabel = {this.state.yAxisLabel}\r\n                showLegend = {false}\r\n            />\r\n            }\r\n            {this.state.varSet && this.state.graphType === \"Pie\" &&\r\n            <PieGraph\r\n                chartData = {chartData}\r\n                title = {this.state.title}\r\n                showLegend = {this.state.showLegend}\r\n            />\r\n            }\r\n            {!this.state.varSet && <div style = {{marginTop: \"200px\"}}> loading... </div>}\r\n        </div>\r\n    )}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}