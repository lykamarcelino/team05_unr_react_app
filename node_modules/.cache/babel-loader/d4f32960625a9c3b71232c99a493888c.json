{"ast":null,"code":"/*!\r\n * copy-descriptor <https://github.com/jonschlinkert/copy-descriptor>\r\n *\r\n * Copyright (c) 2015, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\n'use strict';\n/**\r\n * Copy a descriptor from one object to another.\r\n *\r\n * ```js\r\n * function App() {\r\n *   this.cache = {};\r\n * }\r\n * App.prototype.set = function(key, val) {\r\n *   this.cache[key] = val;\r\n *   return this;\r\n * };\r\n * Object.defineProperty(App.prototype, 'count', {\r\n *   get: function() {\r\n *     return Object.keys(this.cache).length;\r\n *   }\r\n * });\r\n *\r\n * copy(App.prototype, 'count', 'len');\r\n *\r\n * // create an instance\r\n * var app = new App();\r\n *\r\n * app.set('a', true);\r\n * app.set('b', true);\r\n * app.set('c', true);\r\n *\r\n * console.log(app.count);\r\n * //=> 3\r\n * console.log(app.len);\r\n * //=> 3\r\n * ```\r\n * @name copy\r\n * @param {Object} `receiver` The target object\r\n * @param {Object} `provider` The provider object\r\n * @param {String} `from` The key to copy on provider.\r\n * @param {String} `to` Optionally specify a new key name to use.\r\n * @return {Object}\r\n * @api public\r\n */\n\nmodule.exports = function copyDescriptor(receiver, provider, from, to) {\n  if (!isObject(provider) && typeof provider !== 'function') {\n    to = from;\n    from = provider;\n    provider = receiver;\n  }\n\n  if (!isObject(receiver) && typeof receiver !== 'function') {\n    throw new TypeError('expected the first argument to be an object');\n  }\n\n  if (!isObject(provider) && typeof provider !== 'function') {\n    throw new TypeError('expected provider to be an object');\n  }\n\n  if (typeof to !== 'string') {\n    to = from;\n  }\n\n  if (typeof from !== 'string') {\n    throw new TypeError('expected key to be a string');\n  }\n\n  if (!(from in provider)) {\n    throw new Error('property \"' + from + '\" does not exist');\n  }\n\n  var val = Object.getOwnPropertyDescriptor(provider, from);\n  if (val) Object.defineProperty(receiver, to, val);\n};\n\nfunction isObject(val) {\n  return {}.toString.call(val) === '[object Object]';\n}","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/copy-descriptor/index.js"],"names":["module","exports","copyDescriptor","receiver","provider","from","to","isObject","TypeError","Error","val","Object","getOwnPropertyDescriptor","defineProperty","toString","call"],"mappings":"AAAA;;;;;;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCAA,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkDC,EAAlD,EAAsD;AACrE,MAAI,CAACC,QAAQ,CAACH,QAAD,CAAT,IAAuB,OAAOA,QAAP,KAAoB,UAA/C,EAA2D;AACzDE,IAAAA,EAAE,GAAGD,IAAL;AACAA,IAAAA,IAAI,GAAGD,QAAP;AACAA,IAAAA,QAAQ,GAAGD,QAAX;AACD;;AACD,MAAI,CAACI,QAAQ,CAACJ,QAAD,CAAT,IAAuB,OAAOA,QAAP,KAAoB,UAA/C,EAA2D;AACzD,UAAM,IAAIK,SAAJ,CAAc,6CAAd,CAAN;AACD;;AACD,MAAI,CAACD,QAAQ,CAACH,QAAD,CAAT,IAAuB,OAAOA,QAAP,KAAoB,UAA/C,EAA2D;AACzD,UAAM,IAAII,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,MAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;AAC1BA,IAAAA,EAAE,GAAGD,IAAL;AACD;;AACD,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIG,SAAJ,CAAc,6BAAd,CAAN;AACD;;AAED,MAAI,EAAEH,IAAI,IAAID,QAAV,CAAJ,EAAyB;AACvB,UAAM,IAAIK,KAAJ,CAAU,eAAeJ,IAAf,GAAsB,kBAAhC,CAAN;AACD;;AAED,MAAIK,GAAG,GAAGC,MAAM,CAACC,wBAAP,CAAgCR,QAAhC,EAA0CC,IAA1C,CAAV;AACA,MAAIK,GAAJ,EAASC,MAAM,CAACE,cAAP,CAAsBV,QAAtB,EAAgCG,EAAhC,EAAoCI,GAApC;AACV,CA1BD;;AA4BA,SAASH,QAAT,CAAkBG,GAAlB,EAAuB;AACrB,SAAO,GAAGI,QAAH,CAAYC,IAAZ,CAAiBL,GAAjB,MAA0B,iBAAjC;AACD","sourcesContent":["/*!\r\n * copy-descriptor <https://github.com/jonschlinkert/copy-descriptor>\r\n *\r\n * Copyright (c) 2015, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Copy a descriptor from one object to another.\r\n *\r\n * ```js\r\n * function App() {\r\n *   this.cache = {};\r\n * }\r\n * App.prototype.set = function(key, val) {\r\n *   this.cache[key] = val;\r\n *   return this;\r\n * };\r\n * Object.defineProperty(App.prototype, 'count', {\r\n *   get: function() {\r\n *     return Object.keys(this.cache).length;\r\n *   }\r\n * });\r\n *\r\n * copy(App.prototype, 'count', 'len');\r\n *\r\n * // create an instance\r\n * var app = new App();\r\n *\r\n * app.set('a', true);\r\n * app.set('b', true);\r\n * app.set('c', true);\r\n *\r\n * console.log(app.count);\r\n * //=> 3\r\n * console.log(app.len);\r\n * //=> 3\r\n * ```\r\n * @name copy\r\n * @param {Object} `receiver` The target object\r\n * @param {Object} `provider` The provider object\r\n * @param {String} `from` The key to copy on provider.\r\n * @param {String} `to` Optionally specify a new key name to use.\r\n * @return {Object}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function copyDescriptor(receiver, provider, from, to) {\r\n  if (!isObject(provider) && typeof provider !== 'function') {\r\n    to = from;\r\n    from = provider;\r\n    provider = receiver;\r\n  }\r\n  if (!isObject(receiver) && typeof receiver !== 'function') {\r\n    throw new TypeError('expected the first argument to be an object');\r\n  }\r\n  if (!isObject(provider) && typeof provider !== 'function') {\r\n    throw new TypeError('expected provider to be an object');\r\n  }\r\n\r\n  if (typeof to !== 'string') {\r\n    to = from;\r\n  }\r\n  if (typeof from !== 'string') {\r\n    throw new TypeError('expected key to be a string');\r\n  }\r\n\r\n  if (!(from in provider)) {\r\n    throw new Error('property \"' + from + '\" does not exist');\r\n  }\r\n\r\n  var val = Object.getOwnPropertyDescriptor(provider, from);\r\n  if (val) Object.defineProperty(receiver, to, val);\r\n};\r\n\r\nfunction isObject(val) {\r\n  return {}.toString.call(val) === '[object Object]';\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script"}