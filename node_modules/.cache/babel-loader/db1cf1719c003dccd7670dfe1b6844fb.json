{"ast":null,"code":"'use strict';\n\nvar toRegex = require('to-regex');\n\nvar regexNot = require('regex-not');\n\nvar cached;\n/**\r\n * Get the last element from `array`\r\n * @param {Array} `array`\r\n * @return {*}\r\n */\n\nexports.last = function (arr) {\n  return arr[arr.length - 1];\n};\n/**\r\n * Create and cache regex to use for text nodes\r\n */\n\n\nexports.createRegex = function (pattern, include) {\n  if (cached) return cached;\n  var opts = {\n    contains: true,\n    strictClose: false\n  };\n  var not = regexNot.create(pattern, opts);\n  var re;\n\n  if (typeof include === 'string') {\n    re = toRegex('^(?:' + include + '|' + not + ')', opts);\n  } else {\n    re = toRegex(not, opts);\n  }\n\n  return cached = re;\n};","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/expand-brackets/lib/utils.js"],"names":["toRegex","require","regexNot","cached","exports","last","arr","length","createRegex","pattern","include","opts","contains","strictClose","not","create","re"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIE,MAAJ;AAEA;;;;;;AAMAC,OAAO,CAACC,IAAR,GAAe,UAASC,GAAT,EAAc;AAC3B,SAAOA,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAV;AACD,CAFD;AAIA;;;;;AAIAH,OAAO,CAACI,WAAR,GAAsB,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AAC/C,MAAIP,MAAJ,EAAY,OAAOA,MAAP;AACZ,MAAIQ,IAAI,GAAG;AAACC,IAAAA,QAAQ,EAAE,IAAX;AAAiBC,IAAAA,WAAW,EAAE;AAA9B,GAAX;AACA,MAAIC,GAAG,GAAGZ,QAAQ,CAACa,MAAT,CAAgBN,OAAhB,EAAyBE,IAAzB,CAAV;AACA,MAAIK,EAAJ;;AAEA,MAAI,OAAON,OAAP,KAAmB,QAAvB,EAAiC;AAC/BM,IAAAA,EAAE,GAAGhB,OAAO,CAAC,SAASU,OAAT,GAAmB,GAAnB,GAAyBI,GAAzB,GAA+B,GAAhC,EAAqCH,IAArC,CAAZ;AACD,GAFD,MAEO;AACLK,IAAAA,EAAE,GAAGhB,OAAO,CAACc,GAAD,EAAMH,IAAN,CAAZ;AACD;;AAED,SAAQR,MAAM,GAAGa,EAAjB;AACD,CAbD","sourcesContent":["'use strict';\r\n\r\nvar toRegex = require('to-regex');\r\nvar regexNot = require('regex-not');\r\nvar cached;\r\n\r\n/**\r\n * Get the last element from `array`\r\n * @param {Array} `array`\r\n * @return {*}\r\n */\r\n\r\nexports.last = function(arr) {\r\n  return arr[arr.length - 1];\r\n};\r\n\r\n/**\r\n * Create and cache regex to use for text nodes\r\n */\r\n\r\nexports.createRegex = function(pattern, include) {\r\n  if (cached) return cached;\r\n  var opts = {contains: true, strictClose: false};\r\n  var not = regexNot.create(pattern, opts);\r\n  var re;\r\n\r\n  if (typeof include === 'string') {\r\n    re = toRegex('^(?:' + include + '|' + not + ')', opts);\r\n  } else {\r\n    re = toRegex(not, opts);\r\n  }\r\n\r\n  return (cached = re);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}