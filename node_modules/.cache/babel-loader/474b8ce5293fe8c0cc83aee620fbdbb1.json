{"ast":null,"code":"'use strict';\n/**\r\n * Module dependencies\r\n */\n\nvar Snapdragon = require('snapdragon');\n\nvar define = require('define-property');\n\nvar extend = require('extend-shallow');\n/**\r\n * Local dependencies\r\n */\n\n\nvar compilers = require('./compilers');\n\nvar parsers = require('./parsers');\n/**\r\n * Customize Snapdragon parser and renderer\r\n */\n\n\nfunction Extglob(options) {\n  this.options = extend({\n    source: 'extglob'\n  }, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(this.options);\n  this.snapdragon.patterns = this.snapdragon.patterns || {};\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n  compilers(this.snapdragon);\n  parsers(this.snapdragon);\n  /**\r\n   * Override Snapdragon `.parse` method\r\n   */\n\n  define(this.snapdragon, 'parse', function (str, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    parsed.input = str; // escape unmatched brace/bracket/parens\n\n    var last = this.parser.stack.pop();\n\n    if (last && this.options.strict !== true) {\n      var node = last.nodes[0];\n      node.val = '\\\\' + node.val;\n      var sibling = node.parent.nodes[1];\n\n      if (sibling.type === 'star') {\n        sibling.loose = true;\n      }\n    } // add non-enumerable parser reference\n\n\n    define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n  /**\r\n   * Decorate `.parse` method\r\n   */\n\n  define(this, 'parse', function (ast, options) {\n    return this.snapdragon.parse.apply(this.snapdragon, arguments);\n  });\n  /**\r\n   * Decorate `.compile` method\r\n   */\n\n  define(this, 'compile', function (ast, options) {\n    return this.snapdragon.compile.apply(this.snapdragon, arguments);\n  });\n}\n/**\r\n * Expose `Extglob`\r\n */\n\n\nmodule.exports = Extglob;","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/extglob/lib/extglob.js"],"names":["Snapdragon","require","define","extend","compilers","parsers","Extglob","options","source","snapdragon","patterns","compiler","parser","str","parsed","prototype","parse","apply","arguments","input","last","stack","pop","strict","node","nodes","val","sibling","parent","type","loose","ast","compile","module","exports"],"mappings":"AAAA;AAEA;;;;AAIA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAApB;AAEA;;;;;AAIA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAArB;AAEA;;;;;AAIA,SAASK,OAAT,CAAiBC,OAAjB,EAA0B;AACxB,OAAKA,OAAL,GAAeJ,MAAM,CAAC;AAACK,IAAAA,MAAM,EAAE;AAAT,GAAD,EAAsBD,OAAtB,CAArB;AACA,OAAKE,UAAL,GAAkB,KAAKF,OAAL,CAAaE,UAAb,IAA2B,IAAIT,UAAJ,CAAe,KAAKO,OAApB,CAA7C;AACA,OAAKE,UAAL,CAAgBC,QAAhB,GAA2B,KAAKD,UAAL,CAAgBC,QAAhB,IAA4B,EAAvD;AACA,OAAKC,QAAL,GAAgB,KAAKF,UAAL,CAAgBE,QAAhC;AACA,OAAKC,MAAL,GAAc,KAAKH,UAAL,CAAgBG,MAA9B;AAEAR,EAAAA,SAAS,CAAC,KAAKK,UAAN,CAAT;AACAJ,EAAAA,OAAO,CAAC,KAAKI,UAAN,CAAP;AAEA;;;;AAIAP,EAAAA,MAAM,CAAC,KAAKO,UAAN,EAAkB,OAAlB,EAA2B,UAASI,GAAT,EAAcN,OAAd,EAAuB;AACtD,QAAIO,MAAM,GAAGd,UAAU,CAACe,SAAX,CAAqBC,KAArB,CAA2BC,KAA3B,CAAiC,IAAjC,EAAuCC,SAAvC,CAAb;AACAJ,IAAAA,MAAM,CAACK,KAAP,GAAeN,GAAf,CAFsD,CAItD;;AACA,QAAIO,IAAI,GAAG,KAAKR,MAAL,CAAYS,KAAZ,CAAkBC,GAAlB,EAAX;;AACA,QAAIF,IAAI,IAAI,KAAKb,OAAL,CAAagB,MAAb,KAAwB,IAApC,EAA0C;AACxC,UAAIC,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAW,CAAX,CAAX;AACAD,MAAAA,IAAI,CAACE,GAAL,GAAW,OAAOF,IAAI,CAACE,GAAvB;AACA,UAAIC,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAYH,KAAZ,CAAkB,CAAlB,CAAd;;AACA,UAAIE,OAAO,CAACE,IAAR,KAAiB,MAArB,EAA6B;AAC3BF,QAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AACD;AACF,KAbqD,CAetD;;;AACA5B,IAAAA,MAAM,CAACY,MAAD,EAAS,QAAT,EAAmB,KAAKF,MAAxB,CAAN;AACA,WAAOE,MAAP;AACD,GAlBK,CAAN;AAoBA;;;;AAIAZ,EAAAA,MAAM,CAAC,IAAD,EAAO,OAAP,EAAgB,UAAS6B,GAAT,EAAcxB,OAAd,EAAuB;AAC3C,WAAO,KAAKE,UAAL,CAAgBO,KAAhB,CAAsBC,KAAtB,CAA4B,KAAKR,UAAjC,EAA6CS,SAA7C,CAAP;AACD,GAFK,CAAN;AAIA;;;;AAIAhB,EAAAA,MAAM,CAAC,IAAD,EAAO,SAAP,EAAkB,UAAS6B,GAAT,EAAcxB,OAAd,EAAuB;AAC7C,WAAO,KAAKE,UAAL,CAAgBuB,OAAhB,CAAwBf,KAAxB,CAA8B,KAAKR,UAAnC,EAA+CS,SAA/C,CAAP;AACD,GAFK,CAAN;AAID;AAED;;;;;AAIAe,MAAM,CAACC,OAAP,GAAiB5B,OAAjB","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Module dependencies\r\n */\r\n\r\nvar Snapdragon = require('snapdragon');\r\nvar define = require('define-property');\r\nvar extend = require('extend-shallow');\r\n\r\n/**\r\n * Local dependencies\r\n */\r\n\r\nvar compilers = require('./compilers');\r\nvar parsers = require('./parsers');\r\n\r\n/**\r\n * Customize Snapdragon parser and renderer\r\n */\r\n\r\nfunction Extglob(options) {\r\n  this.options = extend({source: 'extglob'}, options);\r\n  this.snapdragon = this.options.snapdragon || new Snapdragon(this.options);\r\n  this.snapdragon.patterns = this.snapdragon.patterns || {};\r\n  this.compiler = this.snapdragon.compiler;\r\n  this.parser = this.snapdragon.parser;\r\n\r\n  compilers(this.snapdragon);\r\n  parsers(this.snapdragon);\r\n\r\n  /**\r\n   * Override Snapdragon `.parse` method\r\n   */\r\n\r\n  define(this.snapdragon, 'parse', function(str, options) {\r\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\r\n    parsed.input = str;\r\n\r\n    // escape unmatched brace/bracket/parens\r\n    var last = this.parser.stack.pop();\r\n    if (last && this.options.strict !== true) {\r\n      var node = last.nodes[0];\r\n      node.val = '\\\\' + node.val;\r\n      var sibling = node.parent.nodes[1];\r\n      if (sibling.type === 'star') {\r\n        sibling.loose = true;\r\n      }\r\n    }\r\n\r\n    // add non-enumerable parser reference\r\n    define(parsed, 'parser', this.parser);\r\n    return parsed;\r\n  });\r\n\r\n  /**\r\n   * Decorate `.parse` method\r\n   */\r\n\r\n  define(this, 'parse', function(ast, options) {\r\n    return this.snapdragon.parse.apply(this.snapdragon, arguments);\r\n  });\r\n\r\n  /**\r\n   * Decorate `.compile` method\r\n   */\r\n\r\n  define(this, 'compile', function(ast, options) {\r\n    return this.snapdragon.compile.apply(this.snapdragon, arguments);\r\n  });\r\n\r\n}\r\n\r\n/**\r\n * Expose `Extglob`\r\n */\r\n\r\nmodule.exports = Extglob;\r\n"]},"metadata":{},"sourceType":"script"}