{"ast":null,"code":"/*!\r\n * set-value <https://github.com/jonschlinkert/set-value>\r\n *\r\n * Copyright (c) 2014-2015, 2017, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\n'use strict';\n\nvar split = require('split-string');\n\nvar extend = require('extend-shallow');\n\nvar isPlainObject = require('is-plain-object');\n\nvar isObject = require('is-extendable');\n\nmodule.exports = function (obj, prop, val) {\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  if (Array.isArray(prop)) {\n    prop = [].concat.apply([], prop).join('.');\n  }\n\n  if (typeof prop !== 'string') {\n    return obj;\n  }\n\n  var keys = split(prop, {\n    sep: '.',\n    brackets: true\n  }).filter(isValidKey);\n  var len = keys.length;\n  var idx = -1;\n  var current = obj;\n\n  while (++idx < len) {\n    var key = keys[idx];\n\n    if (idx !== len - 1) {\n      if (!isObject(current[key])) {\n        current[key] = {};\n      }\n\n      current = current[key];\n      continue;\n    }\n\n    if (isPlainObject(current[key]) && isPlainObject(val)) {\n      current[key] = extend({}, current[key], val);\n    } else {\n      current[key] = val;\n    }\n  }\n\n  return obj;\n};\n\nfunction isValidKey(key) {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n}","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/set-value/index.js"],"names":["split","require","extend","isPlainObject","isObject","module","exports","obj","prop","val","Array","isArray","concat","apply","join","keys","sep","brackets","filter","isValidKey","len","length","idx","current","key"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,eAAD,CAAtB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyB;AACxC,MAAI,CAACL,QAAQ,CAACG,GAAD,CAAb,EAAoB;AAClB,WAAOA,GAAP;AACD;;AAED,MAAIG,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACvBA,IAAAA,IAAI,GAAG,GAAGI,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBL,IAApB,EAA0BM,IAA1B,CAA+B,GAA/B,CAAP;AACD;;AAED,MAAI,OAAON,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOD,GAAP;AACD;;AAED,MAAIQ,IAAI,GAAGf,KAAK,CAACQ,IAAD,EAAO;AAACQ,IAAAA,GAAG,EAAE,GAAN;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAP,CAAL,CAAwCC,MAAxC,CAA+CC,UAA/C,CAAX;AACA,MAAIC,GAAG,GAAGL,IAAI,CAACM,MAAf;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,OAAO,GAAGhB,GAAd;;AAEA,SAAO,EAAEe,GAAF,GAAQF,GAAf,EAAoB;AAClB,QAAII,GAAG,GAAGT,IAAI,CAACO,GAAD,CAAd;;AACA,QAAIA,GAAG,KAAKF,GAAG,GAAG,CAAlB,EAAqB;AACnB,UAAI,CAAChB,QAAQ,CAACmB,OAAO,CAACC,GAAD,CAAR,CAAb,EAA6B;AAC3BD,QAAAA,OAAO,CAACC,GAAD,CAAP,GAAe,EAAf;AACD;;AACDD,MAAAA,OAAO,GAAGA,OAAO,CAACC,GAAD,CAAjB;AACA;AACD;;AAED,QAAIrB,aAAa,CAACoB,OAAO,CAACC,GAAD,CAAR,CAAb,IAA+BrB,aAAa,CAACM,GAAD,CAAhD,EAAuD;AACrDc,MAAAA,OAAO,CAACC,GAAD,CAAP,GAAetB,MAAM,CAAC,EAAD,EAAKqB,OAAO,CAACC,GAAD,CAAZ,EAAmBf,GAAnB,CAArB;AACD,KAFD,MAEO;AACLc,MAAAA,OAAO,CAACC,GAAD,CAAP,GAAef,GAAf;AACD;AACF;;AAED,SAAOF,GAAP;AACD,CApCD;;AAsCA,SAASY,UAAT,CAAoBK,GAApB,EAAyB;AACvB,SAAOA,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,aAA/B,IAAgDA,GAAG,KAAK,WAA/D;AACD","sourcesContent":["/*!\r\n * set-value <https://github.com/jonschlinkert/set-value>\r\n *\r\n * Copyright (c) 2014-2015, 2017, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\r\n\r\n'use strict';\r\n\r\nvar split = require('split-string');\r\nvar extend = require('extend-shallow');\r\nvar isPlainObject = require('is-plain-object');\r\nvar isObject = require('is-extendable');\r\n\r\nmodule.exports = function(obj, prop, val) {\r\n  if (!isObject(obj)) {\r\n    return obj;\r\n  }\r\n\r\n  if (Array.isArray(prop)) {\r\n    prop = [].concat.apply([], prop).join('.');\r\n  }\r\n\r\n  if (typeof prop !== 'string') {\r\n    return obj;\r\n  }\r\n\r\n  var keys = split(prop, {sep: '.', brackets: true}).filter(isValidKey);\r\n  var len = keys.length;\r\n  var idx = -1;\r\n  var current = obj;\r\n\r\n  while (++idx < len) {\r\n    var key = keys[idx];\r\n    if (idx !== len - 1) {\r\n      if (!isObject(current[key])) {\r\n        current[key] = {};\r\n      }\r\n      current = current[key];\r\n      continue;\r\n    }\r\n\r\n    if (isPlainObject(current[key]) && isPlainObject(val)) {\r\n      current[key] = extend({}, current[key], val);\r\n    } else {\r\n      current[key] = val;\r\n    }\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\nfunction isValidKey(key) {\r\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\r\n}\r\n"]},"metadata":{},"sourceType":"script"}