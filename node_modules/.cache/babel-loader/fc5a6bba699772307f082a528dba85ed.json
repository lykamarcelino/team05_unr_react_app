{"ast":null,"code":"'use strict';\n\nvar Base = require('base');\n\nvar define = require('define-property');\n\nvar Compiler = require('./lib/compiler');\n\nvar Parser = require('./lib/parser');\n\nvar utils = require('./lib/utils');\n\nvar regexCache = {};\nvar cache = {};\n/**\r\n * Create a new instance of `Snapdragon` with the given `options`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdragon();\r\n * ```\r\n *\r\n * @param {Object} `options`\r\n * @api public\r\n */\n\nfunction Snapdragon(options) {\n  Base.call(this, null, options);\n  this.options = utils.extend({\n    source: 'string'\n  }, this.options);\n  this.compiler = new Compiler(this.options);\n  this.parser = new Parser(this.options);\n  Object.defineProperty(this, 'compilers', {\n    get: function () {\n      return this.compiler.compilers;\n    }\n  });\n  Object.defineProperty(this, 'parsers', {\n    get: function () {\n      return this.parser.parsers;\n    }\n  });\n  Object.defineProperty(this, 'regex', {\n    get: function () {\n      return this.parser.regex;\n    }\n  });\n}\n/**\r\n * Inherit Base\r\n */\n\n\nBase.extend(Snapdragon);\n/**\r\n * Add a parser to `snapdragon.parsers` for capturing the given `type` using\r\n * the specified regex or parser function. A function is useful if you need\r\n * to customize how the token is created and/or have access to the parser\r\n * instance to check options, etc.\r\n *\r\n * ```js\r\n * snapdragon\r\n *   .capture('slash', /^\\//)\r\n *   .capture('dot', function() {\r\n *     var pos = this.position();\r\n *     var m = this.match(/^\\./);\r\n *     if (!m) return;\r\n *     return pos({\r\n *       type: 'dot',\r\n *       val: m[0]\r\n *     });\r\n *   });\r\n * ```\r\n * @param {String} `type`\r\n * @param {RegExp|Function} `regex`\r\n * @return {Object} Returns the parser instance for chaining\r\n * @api public\r\n */\n\nSnapdragon.prototype.capture = function () {\n  return this.parser.capture.apply(this.parser, arguments);\n};\n/**\r\n * Register a plugin `fn`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdgragon([options]);\r\n * snapdragon.use(function() {\r\n *   console.log(this);          //<= snapdragon instance\r\n *   console.log(this.parser);   //<= parser instance\r\n *   console.log(this.compiler); //<= compiler instance\r\n * });\r\n * ```\r\n * @param {Object} `fn`\r\n * @api public\r\n */\n\n\nSnapdragon.prototype.use = function (fn) {\n  fn.call(this, this);\n  return this;\n};\n/**\r\n * Parse the given `str`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdgragon([options]);\r\n * // register parsers\r\n * snapdragon.parser.use(function() {});\r\n *\r\n * // parse\r\n * var ast = snapdragon.parse('foo/bar');\r\n * console.log(ast);\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options` Set `options.sourcemap` to true to enable source maps.\r\n * @return {Object} Returns an AST.\r\n * @api public\r\n */\n\n\nSnapdragon.prototype.parse = function (str, options) {\n  this.options = utils.extend({}, this.options, options);\n  var parsed = this.parser.parse(str, this.options); // add non-enumerable parser reference\n\n  define(parsed, 'parser', this.parser);\n  return parsed;\n};\n/**\r\n * Compile the given `AST`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdgragon([options]);\r\n * // register plugins\r\n * snapdragon.use(function() {});\r\n * // register parser plugins\r\n * snapdragon.parser.use(function() {});\r\n * // register compiler plugins\r\n * snapdragon.compiler.use(function() {});\r\n *\r\n * // parse\r\n * var ast = snapdragon.parse('foo/bar');\r\n *\r\n * // compile\r\n * var res = snapdragon.compile(ast);\r\n * console.log(res.output);\r\n * ```\r\n * @param {Object} `ast`\r\n * @param {Object} `options`\r\n * @return {Object} Returns an object with an `output` property with the rendered string.\r\n * @api public\r\n */\n\n\nSnapdragon.prototype.compile = function (ast, options) {\n  this.options = utils.extend({}, this.options, options);\n  var compiled = this.compiler.compile(ast, this.options); // add non-enumerable compiler reference\n\n  define(compiled, 'compiler', this.compiler);\n  return compiled;\n};\n/**\r\n * Expose `Snapdragon`\r\n */\n\n\nmodule.exports = Snapdragon;\n/**\r\n * Expose `Parser` and `Compiler`\r\n */\n\nmodule.exports.Compiler = Compiler;\nmodule.exports.Parser = Parser;","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/snapdragon/index.js"],"names":["Base","require","define","Compiler","Parser","utils","regexCache","cache","Snapdragon","options","call","extend","source","compiler","parser","Object","defineProperty","get","compilers","parsers","regex","prototype","capture","apply","arguments","use","fn","parse","str","parsed","compile","ast","compiled","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Base = require('base');\r\nvar define = require('define-property');\r\nvar Compiler = require('./lib/compiler');\r\nvar Parser = require('./lib/parser');\r\nvar utils = require('./lib/utils');\r\nvar regexCache = {};\r\nvar cache = {};\r\n\r\n/**\r\n * Create a new instance of `Snapdragon` with the given `options`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdragon();\r\n * ```\r\n *\r\n * @param {Object} `options`\r\n * @api public\r\n */\r\n\r\nfunction Snapdragon(options) {\r\n  Base.call(this, null, options);\r\n  this.options = utils.extend({source: 'string'}, this.options);\r\n  this.compiler = new Compiler(this.options);\r\n  this.parser = new Parser(this.options);\r\n\r\n  Object.defineProperty(this, 'compilers', {\r\n    get: function() {\r\n      return this.compiler.compilers;\r\n    }\r\n  });\r\n\r\n  Object.defineProperty(this, 'parsers', {\r\n    get: function() {\r\n      return this.parser.parsers;\r\n    }\r\n  });\r\n\r\n  Object.defineProperty(this, 'regex', {\r\n    get: function() {\r\n      return this.parser.regex;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Inherit Base\r\n */\r\n\r\nBase.extend(Snapdragon);\r\n\r\n/**\r\n * Add a parser to `snapdragon.parsers` for capturing the given `type` using\r\n * the specified regex or parser function. A function is useful if you need\r\n * to customize how the token is created and/or have access to the parser\r\n * instance to check options, etc.\r\n *\r\n * ```js\r\n * snapdragon\r\n *   .capture('slash', /^\\//)\r\n *   .capture('dot', function() {\r\n *     var pos = this.position();\r\n *     var m = this.match(/^\\./);\r\n *     if (!m) return;\r\n *     return pos({\r\n *       type: 'dot',\r\n *       val: m[0]\r\n *     });\r\n *   });\r\n * ```\r\n * @param {String} `type`\r\n * @param {RegExp|Function} `regex`\r\n * @return {Object} Returns the parser instance for chaining\r\n * @api public\r\n */\r\n\r\nSnapdragon.prototype.capture = function() {\r\n  return this.parser.capture.apply(this.parser, arguments);\r\n};\r\n\r\n/**\r\n * Register a plugin `fn`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdgragon([options]);\r\n * snapdragon.use(function() {\r\n *   console.log(this);          //<= snapdragon instance\r\n *   console.log(this.parser);   //<= parser instance\r\n *   console.log(this.compiler); //<= compiler instance\r\n * });\r\n * ```\r\n * @param {Object} `fn`\r\n * @api public\r\n */\r\n\r\nSnapdragon.prototype.use = function(fn) {\r\n  fn.call(this, this);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Parse the given `str`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdgragon([options]);\r\n * // register parsers\r\n * snapdragon.parser.use(function() {});\r\n *\r\n * // parse\r\n * var ast = snapdragon.parse('foo/bar');\r\n * console.log(ast);\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options` Set `options.sourcemap` to true to enable source maps.\r\n * @return {Object} Returns an AST.\r\n * @api public\r\n */\r\n\r\nSnapdragon.prototype.parse = function(str, options) {\r\n  this.options = utils.extend({}, this.options, options);\r\n  var parsed = this.parser.parse(str, this.options);\r\n\r\n  // add non-enumerable parser reference\r\n  define(parsed, 'parser', this.parser);\r\n  return parsed;\r\n};\r\n\r\n/**\r\n * Compile the given `AST`.\r\n *\r\n * ```js\r\n * var snapdragon = new Snapdgragon([options]);\r\n * // register plugins\r\n * snapdragon.use(function() {});\r\n * // register parser plugins\r\n * snapdragon.parser.use(function() {});\r\n * // register compiler plugins\r\n * snapdragon.compiler.use(function() {});\r\n *\r\n * // parse\r\n * var ast = snapdragon.parse('foo/bar');\r\n *\r\n * // compile\r\n * var res = snapdragon.compile(ast);\r\n * console.log(res.output);\r\n * ```\r\n * @param {Object} `ast`\r\n * @param {Object} `options`\r\n * @return {Object} Returns an object with an `output` property with the rendered string.\r\n * @api public\r\n */\r\n\r\nSnapdragon.prototype.compile = function(ast, options) {\r\n  this.options = utils.extend({}, this.options, options);\r\n  var compiled = this.compiler.compile(ast, this.options);\r\n\r\n  // add non-enumerable compiler reference\r\n  define(compiled, 'compiler', this.compiler);\r\n  return compiled;\r\n};\r\n\r\n/**\r\n * Expose `Snapdragon`\r\n */\r\n\r\nmodule.exports = Snapdragon;\r\n\r\n/**\r\n * Expose `Parser` and `Compiler`\r\n */\r\n\r\nmodule.exports.Compiler = Compiler;\r\nmodule.exports.Parser = Parser;\r\n"]},"metadata":{},"sourceType":"script"}