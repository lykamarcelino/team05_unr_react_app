{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar define = require('define-property');\n/**\r\n * Text regex\r\n */\n\n\nvar TEXT_REGEX = '(\\\\[(?=.*\\\\])|\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n/**\r\n * Brackets parsers\r\n */\n\nfunction parsers(brackets) {\n  brackets.state = brackets.state || {};\n  brackets.parser.sets.bracket = brackets.parser.sets.bracket || [];\n  brackets.parser.capture('escape', function () {\n    if (this.isInside('bracket')) return;\n    var pos = this.position();\n    var m = this.match(/^\\\\(.)/);\n    if (!m) return;\n    return pos({\n      type: 'escape',\n      val: m[0]\n    });\n  })\n  /**\r\n   * Text parser\r\n   */\n  .capture('text', function () {\n    if (this.isInside('bracket')) return;\n    var pos = this.position();\n    var m = this.match(not);\n    if (!m || !m[0]) return;\n    return pos({\n      type: 'text',\n      val: m[0]\n    });\n  })\n  /**\r\n   * POSIX character classes: \"[[:alpha:][:digits:]]\"\r\n   */\n  .capture('posix', function () {\n    var pos = this.position();\n    var m = this.match(/^\\[:(.*?):\\](?=.*\\])/);\n    if (!m) return;\n    var inside = this.isInside('bracket');\n\n    if (inside) {\n      brackets.posix++;\n    }\n\n    return pos({\n      type: 'posix',\n      insideBracket: inside,\n      inner: m[1],\n      val: m[0]\n    });\n  })\n  /**\r\n   * Bracket (noop)\r\n   */\n  .capture('bracket', function () {})\n  /**\r\n   * Open: '['\r\n   */\n  .capture('bracket.open', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\[(?=.*\\])/);\n    if (!m) return;\n    var prev = this.prev();\n    var last = utils.last(prev.nodes);\n\n    if (parsed.slice(-1) === '\\\\' && !this.isInside('bracket')) {\n      last.val = last.val.slice(0, last.val.length - 1);\n      return pos({\n        type: 'escape',\n        val: m[0]\n      });\n    }\n\n    var open = pos({\n      type: 'bracket.open',\n      val: m[0]\n    });\n\n    if (last.type === 'bracket.open' || this.isInside('bracket')) {\n      open.val = '\\\\' + open.val;\n      open.type = 'bracket.inner';\n      open.escaped = true;\n      return open;\n    }\n\n    var node = pos({\n      type: 'bracket',\n      nodes: [open]\n    });\n    define(node, 'parent', prev);\n    define(open, 'parent', node);\n    this.push('bracket', node);\n    prev.nodes.push(node);\n  })\n  /**\r\n   * Bracket text\r\n   */\n  .capture('bracket.inner', function () {\n    if (!this.isInside('bracket')) return;\n    var pos = this.position();\n    var m = this.match(not);\n    if (!m || !m[0]) return;\n    var next = this.input.charAt(0);\n    var val = m[0];\n    var node = pos({\n      type: 'bracket.inner',\n      val: val\n    });\n\n    if (val === '\\\\\\\\') {\n      return node;\n    }\n\n    var first = val.charAt(0);\n    var last = val.slice(-1);\n\n    if (first === '!') {\n      val = '^' + val.slice(1);\n    }\n\n    if (last === '\\\\' || val === '^' && next === ']') {\n      val += this.input[0];\n      this.consume(1);\n    }\n\n    node.val = val;\n    return node;\n  })\n  /**\r\n   * Close: ']'\r\n   */\n  .capture('bracket.close', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\]/);\n    if (!m) return;\n    var prev = this.prev();\n    var last = utils.last(prev.nodes);\n\n    if (parsed.slice(-1) === '\\\\' && !this.isInside('bracket')) {\n      last.val = last.val.slice(0, last.val.length - 1);\n      return pos({\n        type: 'escape',\n        val: m[0]\n      });\n    }\n\n    var node = pos({\n      type: 'bracket.close',\n      rest: this.input,\n      val: m[0]\n    });\n\n    if (last.type === 'bracket.open') {\n      node.type = 'bracket.inner';\n      node.escaped = true;\n      return node;\n    }\n\n    var bracket = this.pop('bracket');\n\n    if (!this.isType(bracket, 'bracket')) {\n      if (this.options.strict) {\n        throw new Error('missing opening \"[\"');\n      }\n\n      node.type = 'bracket.inner';\n      node.escaped = true;\n      return node;\n    }\n\n    bracket.nodes.push(node);\n    define(node, 'parent', bracket);\n  });\n}\n/**\r\n * Brackets parsers\r\n */\n\n\nmodule.exports = parsers;\n/**\r\n * Expose text regex\r\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/expand-brackets/lib/parsers.js"],"names":["utils","require","define","TEXT_REGEX","not","createRegex","parsers","brackets","state","parser","sets","bracket","capture","isInside","pos","position","m","match","type","val","inside","posix","insideBracket","inner","parsed","prev","last","nodes","slice","length","open","escaped","node","push","next","input","charAt","first","consume","rest","pop","isType","options","strict","Error","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar utils = require('./utils');\r\nvar define = require('define-property');\r\n\r\n/**\r\n * Text regex\r\n */\r\n\r\nvar TEXT_REGEX = '(\\\\[(?=.*\\\\])|\\\\])+';\r\nvar not = utils.createRegex(TEXT_REGEX);\r\n\r\n/**\r\n * Brackets parsers\r\n */\r\n\r\nfunction parsers(brackets) {\r\n  brackets.state = brackets.state || {};\r\n  brackets.parser.sets.bracket = brackets.parser.sets.bracket || [];\r\n  brackets.parser\r\n\r\n    .capture('escape', function() {\r\n      if (this.isInside('bracket')) return;\r\n      var pos = this.position();\r\n      var m = this.match(/^\\\\(.)/);\r\n      if (!m) return;\r\n\r\n      return pos({\r\n        type: 'escape',\r\n        val: m[0]\r\n      });\r\n    })\r\n\r\n    /**\r\n     * Text parser\r\n     */\r\n\r\n    .capture('text', function() {\r\n      if (this.isInside('bracket')) return;\r\n      var pos = this.position();\r\n      var m = this.match(not);\r\n      if (!m || !m[0]) return;\r\n\r\n      return pos({\r\n        type: 'text',\r\n        val: m[0]\r\n      });\r\n    })\r\n\r\n    /**\r\n     * POSIX character classes: \"[[:alpha:][:digits:]]\"\r\n     */\r\n\r\n    .capture('posix', function() {\r\n      var pos = this.position();\r\n      var m = this.match(/^\\[:(.*?):\\](?=.*\\])/);\r\n      if (!m) return;\r\n\r\n      var inside = this.isInside('bracket');\r\n      if (inside) {\r\n        brackets.posix++;\r\n      }\r\n\r\n      return pos({\r\n        type: 'posix',\r\n        insideBracket: inside,\r\n        inner: m[1],\r\n        val: m[0]\r\n      });\r\n    })\r\n\r\n    /**\r\n     * Bracket (noop)\r\n     */\r\n\r\n    .capture('bracket', function() {})\r\n\r\n    /**\r\n     * Open: '['\r\n     */\r\n\r\n    .capture('bracket.open', function() {\r\n      var parsed = this.parsed;\r\n      var pos = this.position();\r\n      var m = this.match(/^\\[(?=.*\\])/);\r\n      if (!m) return;\r\n\r\n      var prev = this.prev();\r\n      var last = utils.last(prev.nodes);\r\n\r\n      if (parsed.slice(-1) === '\\\\' && !this.isInside('bracket')) {\r\n        last.val = last.val.slice(0, last.val.length - 1);\r\n        return pos({\r\n          type: 'escape',\r\n          val: m[0]\r\n        });\r\n      }\r\n\r\n      var open = pos({\r\n        type: 'bracket.open',\r\n        val: m[0]\r\n      });\r\n\r\n      if (last.type === 'bracket.open' || this.isInside('bracket')) {\r\n        open.val = '\\\\' + open.val;\r\n        open.type = 'bracket.inner';\r\n        open.escaped = true;\r\n        return open;\r\n      }\r\n\r\n      var node = pos({\r\n        type: 'bracket',\r\n        nodes: [open]\r\n      });\r\n\r\n      define(node, 'parent', prev);\r\n      define(open, 'parent', node);\r\n      this.push('bracket', node);\r\n      prev.nodes.push(node);\r\n    })\r\n\r\n    /**\r\n     * Bracket text\r\n     */\r\n\r\n    .capture('bracket.inner', function() {\r\n      if (!this.isInside('bracket')) return;\r\n      var pos = this.position();\r\n      var m = this.match(not);\r\n      if (!m || !m[0]) return;\r\n\r\n      var next = this.input.charAt(0);\r\n      var val = m[0];\r\n\r\n      var node = pos({\r\n        type: 'bracket.inner',\r\n        val: val\r\n      });\r\n\r\n      if (val === '\\\\\\\\') {\r\n        return node;\r\n      }\r\n\r\n      var first = val.charAt(0);\r\n      var last = val.slice(-1);\r\n\r\n      if (first === '!') {\r\n        val = '^' + val.slice(1);\r\n      }\r\n\r\n      if (last === '\\\\' || (val === '^' && next === ']')) {\r\n        val += this.input[0];\r\n        this.consume(1);\r\n      }\r\n\r\n      node.val = val;\r\n      return node;\r\n    })\r\n\r\n    /**\r\n     * Close: ']'\r\n     */\r\n\r\n    .capture('bracket.close', function() {\r\n      var parsed = this.parsed;\r\n      var pos = this.position();\r\n      var m = this.match(/^\\]/);\r\n      if (!m) return;\r\n\r\n      var prev = this.prev();\r\n      var last = utils.last(prev.nodes);\r\n\r\n      if (parsed.slice(-1) === '\\\\' && !this.isInside('bracket')) {\r\n        last.val = last.val.slice(0, last.val.length - 1);\r\n\r\n        return pos({\r\n          type: 'escape',\r\n          val: m[0]\r\n        });\r\n      }\r\n\r\n      var node = pos({\r\n        type: 'bracket.close',\r\n        rest: this.input,\r\n        val: m[0]\r\n      });\r\n\r\n      if (last.type === 'bracket.open') {\r\n        node.type = 'bracket.inner';\r\n        node.escaped = true;\r\n        return node;\r\n      }\r\n\r\n      var bracket = this.pop('bracket');\r\n      if (!this.isType(bracket, 'bracket')) {\r\n        if (this.options.strict) {\r\n          throw new Error('missing opening \"[\"');\r\n        }\r\n        node.type = 'bracket.inner';\r\n        node.escaped = true;\r\n        return node;\r\n      }\r\n\r\n      bracket.nodes.push(node);\r\n      define(node, 'parent', bracket);\r\n    });\r\n}\r\n\r\n/**\r\n * Brackets parsers\r\n */\r\n\r\nmodule.exports = parsers;\r\n\r\n/**\r\n * Expose text regex\r\n */\r\n\r\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\r\n"]},"metadata":{},"sourceType":"script"}