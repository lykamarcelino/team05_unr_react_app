{"ast":null,"code":"/*!\r\n * static-extend <https://github.com/jonschlinkert/static-extend>\r\n *\r\n * Copyright (c) 2016, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\n'use strict';\n\nvar copy = require('object-copy');\n\nvar define = require('define-property');\n\nvar util = require('util');\n/**\r\n * Returns a function for extending the static properties,\r\n * prototype properties, and descriptors from the `Parent`\r\n * constructor onto `Child` constructors.\r\n *\r\n * ```js\r\n * var extend = require('static-extend');\r\n * Parent.extend = extend(Parent);\r\n *\r\n * // optionally pass a custom merge function as the second arg\r\n * Parent.extend = extend(Parent, function(Child) {\r\n *   Child.prototype.mixin = function(key, val) {\r\n *     Child.prototype[key] = val;\r\n *   };\r\n * });\r\n *\r\n * // extend \"child\" constructors\r\n * Parent.extend(Child);\r\n *\r\n * // optionally define prototype methods as the second arg\r\n * Parent.extend(Child, {\r\n *   foo: function() {},\r\n *   bar: function() {}\r\n * });\r\n * ```\r\n * @param {Function} `Parent` Parent ctor\r\n * @param {Function} `extendFn` Optional extend function for handling any necessary custom merging. Useful when updating methods that require a specific prototype.\r\n *   @param {Function} `Child` Child ctor\r\n *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.\r\n *   @return {Object}\r\n * @api public\r\n */\n\n\nfunction extend(Parent, extendFn) {\n  if (typeof Parent !== 'function') {\n    throw new TypeError('expected Parent to be a function.');\n  }\n\n  return function (Ctor, proto) {\n    if (typeof Ctor !== 'function') {\n      throw new TypeError('expected Ctor to be a function.');\n    }\n\n    util.inherits(Ctor, Parent);\n    copy(Ctor, Parent); // proto can be null or a plain object\n\n    if (typeof proto === 'object') {\n      var obj = Object.create(proto);\n\n      for (var k in obj) {\n        Ctor.prototype[k] = obj[k];\n      }\n    } // keep a reference to the parent prototype\n\n\n    define(Ctor.prototype, '_parent_', {\n      configurable: true,\n      set: function () {},\n      get: function () {\n        return Parent.prototype;\n      }\n    });\n\n    if (typeof extendFn === 'function') {\n      extendFn(Ctor, Parent);\n    }\n\n    Ctor.extend = extend(Ctor, extendFn);\n  };\n}\n\n;\n/**\r\n * Expose `extend`\r\n */\n\nmodule.exports = extend;","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/static-extend/index.js"],"names":["copy","require","define","util","extend","Parent","extendFn","TypeError","Ctor","proto","inherits","obj","Object","create","k","prototype","configurable","set","get","module","exports"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASG,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;AAChC,MAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAChC,UAAM,IAAIE,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,SAAO,UAASC,IAAT,EAAeC,KAAf,EAAsB;AAC3B,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9B,YAAM,IAAID,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAEDJ,IAAAA,IAAI,CAACO,QAAL,CAAcF,IAAd,EAAoBH,MAApB;AACAL,IAAAA,IAAI,CAACQ,IAAD,EAAOH,MAAP,CAAJ,CAN2B,CAQ3B;;AACA,QAAI,OAAOI,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAIE,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAd,CAAV;;AAEA,WAAK,IAAIK,CAAT,IAAcH,GAAd,EAAmB;AACjBH,QAAAA,IAAI,CAACO,SAAL,CAAeD,CAAf,IAAoBH,GAAG,CAACG,CAAD,CAAvB;AACD;AACF,KAf0B,CAiB3B;;;AACAZ,IAAAA,MAAM,CAACM,IAAI,CAACO,SAAN,EAAiB,UAAjB,EAA6B;AACjCC,MAAAA,YAAY,EAAE,IADmB;AAEjCC,MAAAA,GAAG,EAAE,YAAW,CAAE,CAFe;AAGjCC,MAAAA,GAAG,EAAE,YAAW;AACd,eAAOb,MAAM,CAACU,SAAd;AACD;AALgC,KAA7B,CAAN;;AAQA,QAAI,OAAOT,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,CAACE,IAAD,EAAOH,MAAP,CAAR;AACD;;AAEDG,IAAAA,IAAI,CAACJ,MAAL,GAAcA,MAAM,CAACI,IAAD,EAAOF,QAAP,CAApB;AACD,GA/BD;AAgCD;;AAAA;AAED;;;;AAIAa,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["/*!\r\n * static-extend <https://github.com/jonschlinkert/static-extend>\r\n *\r\n * Copyright (c) 2016, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n'use strict';\r\n\r\nvar copy = require('object-copy');\r\nvar define = require('define-property');\r\nvar util = require('util');\r\n\r\n/**\r\n * Returns a function for extending the static properties,\r\n * prototype properties, and descriptors from the `Parent`\r\n * constructor onto `Child` constructors.\r\n *\r\n * ```js\r\n * var extend = require('static-extend');\r\n * Parent.extend = extend(Parent);\r\n *\r\n * // optionally pass a custom merge function as the second arg\r\n * Parent.extend = extend(Parent, function(Child) {\r\n *   Child.prototype.mixin = function(key, val) {\r\n *     Child.prototype[key] = val;\r\n *   };\r\n * });\r\n *\r\n * // extend \"child\" constructors\r\n * Parent.extend(Child);\r\n *\r\n * // optionally define prototype methods as the second arg\r\n * Parent.extend(Child, {\r\n *   foo: function() {},\r\n *   bar: function() {}\r\n * });\r\n * ```\r\n * @param {Function} `Parent` Parent ctor\r\n * @param {Function} `extendFn` Optional extend function for handling any necessary custom merging. Useful when updating methods that require a specific prototype.\r\n *   @param {Function} `Child` Child ctor\r\n *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.\r\n *   @return {Object}\r\n * @api public\r\n */\r\n\r\nfunction extend(Parent, extendFn) {\r\n  if (typeof Parent !== 'function') {\r\n    throw new TypeError('expected Parent to be a function.');\r\n  }\r\n\r\n  return function(Ctor, proto) {\r\n    if (typeof Ctor !== 'function') {\r\n      throw new TypeError('expected Ctor to be a function.');\r\n    }\r\n\r\n    util.inherits(Ctor, Parent);\r\n    copy(Ctor, Parent);\r\n\r\n    // proto can be null or a plain object\r\n    if (typeof proto === 'object') {\r\n      var obj = Object.create(proto);\r\n\r\n      for (var k in obj) {\r\n        Ctor.prototype[k] = obj[k];\r\n      }\r\n    }\r\n\r\n    // keep a reference to the parent prototype\r\n    define(Ctor.prototype, '_parent_', {\r\n      configurable: true,\r\n      set: function() {},\r\n      get: function() {\r\n        return Parent.prototype;\r\n      }\r\n    });\r\n\r\n    if (typeof extendFn === 'function') {\r\n      extendFn(Ctor, Parent);\r\n    }\r\n\r\n    Ctor.extend = extend(Ctor, extendFn);\r\n  };\r\n};\r\n\r\n/**\r\n * Expose `extend`\r\n */\r\n\r\nmodule.exports = extend;\r\n"]},"metadata":{},"sourceType":"script"}