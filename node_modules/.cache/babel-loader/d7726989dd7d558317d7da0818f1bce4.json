{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = formatTestResults;\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\r\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n\nconst formatTestResult = (testResult, codeCoverageFormatter, reporter) => {\n  const assertionResults = testResult.testResults.map(formatTestAssertion);\n\n  if (testResult.testExecError) {\n    const now = Date.now();\n    return {\n      assertionResults,\n      coverage: {},\n      endTime: now,\n      message: testResult.failureMessage ? testResult.failureMessage : testResult.testExecError.message,\n      name: testResult.testFilePath,\n      startTime: now,\n      status: 'failed',\n      summary: ''\n    };\n  } else {\n    const allTestsPassed = testResult.numFailingTests === 0;\n    return {\n      assertionResults,\n      coverage: codeCoverageFormatter ? codeCoverageFormatter(testResult.coverage, reporter) : testResult.coverage,\n      endTime: testResult.perfStats.end,\n      message: testResult.failureMessage || '',\n      name: testResult.testFilePath,\n      startTime: testResult.perfStats.start,\n      status: allTestsPassed ? 'passed' : 'failed',\n      summary: ''\n    };\n  }\n};\n\nfunction formatTestAssertion(assertion) {\n  const result = {\n    ancestorTitles: assertion.ancestorTitles,\n    failureMessages: null,\n    fullName: assertion.fullName,\n    location: assertion.location,\n    status: assertion.status,\n    title: assertion.title\n  };\n\n  if (assertion.failureMessages) {\n    result.failureMessages = assertion.failureMessages;\n  }\n\n  return result;\n}\n\nfunction formatTestResults(results, codeCoverageFormatter, reporter) {\n  const testResults = results.testResults.map(testResult => formatTestResult(testResult, codeCoverageFormatter, reporter));\n  return _objectSpread({}, results, {\n    testResults\n  });\n}","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/@jest/test-result/build/formatTestResults.js"],"names":["Object","defineProperty","exports","value","default","formatTestResults","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","configurable","writable","formatTestResult","testResult","codeCoverageFormatter","reporter","assertionResults","testResults","map","formatTestAssertion","testExecError","now","Date","coverage","endTime","message","failureMessage","name","testFilePath","startTime","status","summary","allTestsPassed","numFailingTests","perfStats","end","start","assertion","result","ancestorTitles","failureMessages","fullName","location","title","results"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\nexports.default = formatTestResults;\r\n\r\nfunction _objectSpread(target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i] != null ? arguments[i] : {};\r\n    var ownKeys = Object.keys(source);\r\n    if (typeof Object.getOwnPropertySymbols === 'function') {\r\n      ownKeys = ownKeys.concat(\r\n        Object.getOwnPropertySymbols(source).filter(function(sym) {\r\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\r\n        })\r\n      );\r\n    }\r\n    ownKeys.forEach(function(key) {\r\n      _defineProperty(target, key, source[key]);\r\n    });\r\n  }\r\n  return target;\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nconst formatTestResult = (testResult, codeCoverageFormatter, reporter) => {\r\n  const assertionResults = testResult.testResults.map(formatTestAssertion);\r\n\r\n  if (testResult.testExecError) {\r\n    const now = Date.now();\r\n    return {\r\n      assertionResults,\r\n      coverage: {},\r\n      endTime: now,\r\n      message: testResult.failureMessage\r\n        ? testResult.failureMessage\r\n        : testResult.testExecError.message,\r\n      name: testResult.testFilePath,\r\n      startTime: now,\r\n      status: 'failed',\r\n      summary: ''\r\n    };\r\n  } else {\r\n    const allTestsPassed = testResult.numFailingTests === 0;\r\n    return {\r\n      assertionResults,\r\n      coverage: codeCoverageFormatter\r\n        ? codeCoverageFormatter(testResult.coverage, reporter)\r\n        : testResult.coverage,\r\n      endTime: testResult.perfStats.end,\r\n      message: testResult.failureMessage || '',\r\n      name: testResult.testFilePath,\r\n      startTime: testResult.perfStats.start,\r\n      status: allTestsPassed ? 'passed' : 'failed',\r\n      summary: ''\r\n    };\r\n  }\r\n};\r\n\r\nfunction formatTestAssertion(assertion) {\r\n  const result = {\r\n    ancestorTitles: assertion.ancestorTitles,\r\n    failureMessages: null,\r\n    fullName: assertion.fullName,\r\n    location: assertion.location,\r\n    status: assertion.status,\r\n    title: assertion.title\r\n  };\r\n\r\n  if (assertion.failureMessages) {\r\n    result.failureMessages = assertion.failureMessages;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction formatTestResults(results, codeCoverageFormatter, reporter) {\r\n  const testResults = results.testResults.map(testResult =>\r\n    formatTestResult(testResult, codeCoverageFormatter, reporter)\r\n  );\r\n  return _objectSpread({}, results, {\r\n    testResults\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}