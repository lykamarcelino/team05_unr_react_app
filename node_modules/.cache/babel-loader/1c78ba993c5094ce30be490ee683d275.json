{"ast":null,"code":"'use strict';\n\nvar vendors = require('./vendors.json');\n\nvar env = process.env; // Used for testing only\n\nObject.defineProperty(exports, '_vendors', {\n  value: vendors.map(function (v) {\n    return v.constant;\n  })\n});\nexports.name = null;\nexports.isPR = null;\nvendors.forEach(function (vendor) {\n  var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];\n  var isCI = envs.every(function (obj) {\n    return checkEnv(obj);\n  });\n  exports[vendor.constant] = isCI;\n\n  if (isCI) {\n    exports.name = vendor.name;\n\n    switch (typeof vendor.pr) {\n      case 'string':\n        // \"pr\": \"CIRRUS_PR\"\n        exports.isPR = !!env[vendor.pr];\n        break;\n\n      case 'object':\n        if ('env' in vendor.pr) {\n          // \"pr\": { \"env\": \"BUILDKITE_PULL_REQUEST\", \"ne\": \"false\" }\n          exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;\n        } else if ('any' in vendor.pr) {\n          // \"pr\": { \"any\": [\"ghprbPullId\", \"CHANGE_ID\"] }\n          exports.isPR = vendor.pr.any.some(function (key) {\n            return !!env[key];\n          });\n        } else {\n          // \"pr\": { \"DRONE_BUILD_EVENT\": \"pull_request\" }\n          exports.isPR = checkEnv(vendor.pr);\n        }\n\n        break;\n\n      default:\n        // PR detection not supported for this vendor\n        exports.isPR = null;\n    }\n  }\n});\nexports.isCI = !!(env.CI || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari\nenv.CONTINUOUS_INTEGRATION || // Travis CI, Cirrus CI\nenv.BUILD_NUMBER || // Jenkins, TeamCity\nenv.RUN_ID || // TaskCluster, dsari\nexports.name || false);\n\nfunction checkEnv(obj) {\n  if (typeof obj === 'string') return !!env[obj];\n  return Object.keys(obj).every(function (k) {\n    return env[k] === obj[k];\n  });\n}","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/ci-info/index.js"],"names":["vendors","require","env","process","Object","defineProperty","exports","value","map","v","constant","name","isPR","forEach","vendor","envs","Array","isArray","isCI","every","obj","checkEnv","pr","ne","any","some","key","CI","CONTINUOUS_INTEGRATION","BUILD_NUMBER","RUN_ID","keys","k"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAACD,GAAlB,C,CAEA;;AACAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,UAA/B,EAA2C;AACzCC,EAAAA,KAAK,EAAEP,OAAO,CAACQ,GAAR,CAAY,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACC,QAAT;AAAmB,GAA9C;AADkC,CAA3C;AAIAJ,OAAO,CAACK,IAAR,GAAe,IAAf;AACAL,OAAO,CAACM,IAAR,GAAe,IAAf;AAEAZ,OAAO,CAACa,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChC,MAAIC,IAAI,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAM,CAACZ,GAArB,IAA4BY,MAAM,CAACZ,GAAnC,GAAyC,CAACY,MAAM,CAACZ,GAAR,CAApD;AACA,MAAIgB,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAW,UAAUC,GAAV,EAAe;AACnC,WAAOC,QAAQ,CAACD,GAAD,CAAf;AACD,GAFU,CAAX;AAIAd,EAAAA,OAAO,CAACQ,MAAM,CAACJ,QAAR,CAAP,GAA2BQ,IAA3B;;AAEA,MAAIA,IAAJ,EAAU;AACRZ,IAAAA,OAAO,CAACK,IAAR,GAAeG,MAAM,CAACH,IAAtB;;AAEA,YAAQ,OAAOG,MAAM,CAACQ,EAAtB;AACE,WAAK,QAAL;AACE;AACAhB,QAAAA,OAAO,CAACM,IAAR,GAAe,CAAC,CAACV,GAAG,CAACY,MAAM,CAACQ,EAAR,CAApB;AACA;;AACF,WAAK,QAAL;AACE,YAAI,SAASR,MAAM,CAACQ,EAApB,EAAwB;AACtB;AACAhB,UAAAA,OAAO,CAACM,IAAR,GAAeE,MAAM,CAACQ,EAAP,CAAUpB,GAAV,IAAiBA,GAAjB,IAAwBA,GAAG,CAACY,MAAM,CAACQ,EAAP,CAAUpB,GAAX,CAAH,KAAuBY,MAAM,CAACQ,EAAP,CAAUC,EAAxE;AACD,SAHD,MAGO,IAAI,SAAST,MAAM,CAACQ,EAApB,EAAwB;AAC7B;AACAhB,UAAAA,OAAO,CAACM,IAAR,GAAeE,MAAM,CAACQ,EAAP,CAAUE,GAAV,CAAcC,IAAd,CAAmB,UAAUC,GAAV,EAAe;AAC/C,mBAAO,CAAC,CAACxB,GAAG,CAACwB,GAAD,CAAZ;AACD,WAFc,CAAf;AAGD,SALM,MAKA;AACL;AACApB,UAAAA,OAAO,CAACM,IAAR,GAAeS,QAAQ,CAACP,MAAM,CAACQ,EAAR,CAAvB;AACD;;AACD;;AACF;AACE;AACAhB,QAAAA,OAAO,CAACM,IAAR,GAAe,IAAf;AArBJ;AAuBD;AACF,CAnCD;AAqCAN,OAAO,CAACY,IAAR,GAAe,CAAC,EACdhB,GAAG,CAACyB,EAAJ,IAAU;AACVzB,GAAG,CAAC0B,sBADJ,IAC8B;AAC9B1B,GAAG,CAAC2B,YAFJ,IAEoB;AACpB3B,GAAG,CAAC4B,MAHJ,IAGc;AACdxB,OAAO,CAACK,IAJR,IAKA,KANc,CAAhB;;AASA,SAASU,QAAT,CAAmBD,GAAnB,EAAwB;AACtB,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAO,CAAC,CAAClB,GAAG,CAACkB,GAAD,CAAZ;AAC7B,SAAOhB,MAAM,CAAC2B,IAAP,CAAYX,GAAZ,EAAiBD,KAAjB,CAAuB,UAAUa,CAAV,EAAa;AACzC,WAAO9B,GAAG,CAAC8B,CAAD,CAAH,KAAWZ,GAAG,CAACY,CAAD,CAArB;AACD,GAFM,CAAP;AAGD","sourcesContent":["'use strict'\r\n\r\nvar vendors = require('./vendors.json')\r\n\r\nvar env = process.env\r\n\r\n// Used for testing only\r\nObject.defineProperty(exports, '_vendors', {\r\n  value: vendors.map(function (v) { return v.constant })\r\n})\r\n\r\nexports.name = null\r\nexports.isPR = null\r\n\r\nvendors.forEach(function (vendor) {\r\n  var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env]\r\n  var isCI = envs.every(function (obj) {\r\n    return checkEnv(obj)\r\n  })\r\n\r\n  exports[vendor.constant] = isCI\r\n\r\n  if (isCI) {\r\n    exports.name = vendor.name\r\n\r\n    switch (typeof vendor.pr) {\r\n      case 'string':\r\n        // \"pr\": \"CIRRUS_PR\"\r\n        exports.isPR = !!env[vendor.pr]\r\n        break\r\n      case 'object':\r\n        if ('env' in vendor.pr) {\r\n          // \"pr\": { \"env\": \"BUILDKITE_PULL_REQUEST\", \"ne\": \"false\" }\r\n          exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne\r\n        } else if ('any' in vendor.pr) {\r\n          // \"pr\": { \"any\": [\"ghprbPullId\", \"CHANGE_ID\"] }\r\n          exports.isPR = vendor.pr.any.some(function (key) {\r\n            return !!env[key]\r\n          })\r\n        } else {\r\n          // \"pr\": { \"DRONE_BUILD_EVENT\": \"pull_request\" }\r\n          exports.isPR = checkEnv(vendor.pr)\r\n        }\r\n        break\r\n      default:\r\n        // PR detection not supported for this vendor\r\n        exports.isPR = null\r\n    }\r\n  }\r\n})\r\n\r\nexports.isCI = !!(\r\n  env.CI || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari\r\n  env.CONTINUOUS_INTEGRATION || // Travis CI, Cirrus CI\r\n  env.BUILD_NUMBER || // Jenkins, TeamCity\r\n  env.RUN_ID || // TaskCluster, dsari\r\n  exports.name ||\r\n  false\r\n)\r\n\r\nfunction checkEnv (obj) {\r\n  if (typeof obj === 'string') return !!env[obj]\r\n  return Object.keys(obj).every(function (k) {\r\n    return env[k] === obj[k]\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}