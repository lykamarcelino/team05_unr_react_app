{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Liliana\\\\Documents\\\\AFinalUpdate\\\\team05_unr_react_app\\\\src\\\\components\\\\GraphDisplay.js\";\nimport React from \"react\";\nimport BarGraph from \"./graphComponents/BarGraph\";\nimport { Bar } from \"react-chartjs-2\";\nexport default class GraphDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graphName: this.props.graphName,\n      numPred: this.props.numPred,\n      graphType: this.props.graphType,\n      predFrequency: this.props.predFrequency,\n      showTable: this.props.showTable,\n      from: this.props.from,\n      labels: null,\n      dataLabel: null,\n      data: null,\n      colors: null,\n      legendPosition: null,\n      title: null,\n      xAxisLabel: null,\n      yAxisLabel: null,\n      showLegend: null,\n      dataFetched: false\n    };\n  }\n\n  componentWillMount() {\n    fetch('http://localhost:8080/getNewGraph', {\n      method: 'GET',\n      headers: {\n        'graphName': this.state.graphName,\n        'numPred': this.state.numPred,\n        'graphType': this.state.graphType,\n        'predFrequency': this.state.predFrequency,\n        'from': this.state.from\n      }\n    }).then(res => res.json()).then(jsonResponse => {\n      this.setState({\n        labels: jsonResponse.labels,\n        dataLabel: jsonResponse.dataLabel,\n        data: jsonResponse.data,\n        colors: jsonResponse.colors,\n        legendPosition: jsonResponse.legendPosition,\n        title: jsonResponse.title,\n        xAxisLabel: jsonResponse.xAxisLabel,\n        yAxisLabel: jsonResponse.yAxisLabel,\n        showLegend: jsonResponse.showLegend\n      });\n      console.log(\"fetch was done\");\n      console.log(this.state);\n    }).catch(function (error) {\n      console.log('There has been a problem with your fetch operation: ' + error.message);\n      throw error;\n    });\n    this.setState({\n      dataFetched: true\n    });\n  }\n\n  render() {\n    console.log(\"this in render before return\");\n    console.log(this.state);\n    console.log(\"this is the props\");\n    console.log(this.props);\n    var chartData = {\n      labels: ['Boston', 'Worcester', 'Springfield', 'Lowell', 'Cambridge', 'New Bedford'],\n      datasets: [{\n        label: 'Population',\n        data: [617594, 181045, 153060, 106519, 105162, 95072],\n        backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(255, 99, 132, 0.6)']\n      }]\n    };\n    if (this.state.dataFetched === false) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Loading...\");\n    if (this.state.dataFetched === true) return React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        alignContent: 'center',\n        paddingTop: '130px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(BarGraph, {\n      chartData: chartData,\n      title: this.state.title,\n      xAxisLabel: this.state.xAxisLabel,\n      yAxisLabel: this.state.yAxisLabel,\n      showLegend: this.state.showLegend,\n      legedPosition: this.state.legendPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Liliana/Documents/AFinalUpdate/team05_unr_react_app/src/components/GraphDisplay.js"],"names":["React","BarGraph","Bar","GraphDisplay","Component","constructor","props","state","graphName","numPred","graphType","predFrequency","showTable","from","labels","dataLabel","data","colors","legendPosition","title","xAxisLabel","yAxisLabel","showLegend","dataFetched","componentWillMount","fetch","method","headers","then","res","json","jsonResponse","setState","console","log","catch","error","message","render","chartData","datasets","label","backgroundColor","textAlign","alignContent","paddingTop"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport BarGraph from \"./graphComponents/BarGraph\";\r\nimport {Bar} from \"react-chartjs-2\";\r\n\r\nexport default class GraphDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            graphName: this.props.graphName,\r\n            numPred: this.props.numPred,\r\n            graphType: this.props.graphType,\r\n            predFrequency: this.props.predFrequency,\r\n            showTable: this.props.showTable,\r\n            from: this.props.from,\r\n            labels: null,\r\n            dataLabel: null,\r\n            data: null,\r\n            colors: null,\r\n            legendPosition: null,\r\n            title: null,\r\n            xAxisLabel: null,\r\n            yAxisLabel: null,\r\n            showLegend: null,\r\n            dataFetched: false\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        fetch('http://localhost:8080/getNewGraph', {\r\n            method: 'GET',\r\n            headers: {\r\n                'graphName': this.state.graphName,\r\n                'numPred': this.state.numPred,\r\n                'graphType': this.state.graphType,\r\n                'predFrequency': this.state.predFrequency,\r\n                'from': this.state.from,\r\n            }})\r\n            .then(res => res.json())\r\n            .then(jsonResponse => {\r\n                this.setState({\r\n                    labels: jsonResponse.labels,\r\n                    dataLabel: jsonResponse.dataLabel,\r\n                    data:jsonResponse.data,\r\n                    colors: jsonResponse.colors,\r\n                    legendPosition: jsonResponse.legendPosition,\r\n                    title : jsonResponse.title,\r\n                    xAxisLabel: jsonResponse.xAxisLabel,\r\n                    yAxisLabel: jsonResponse.yAxisLabel,\r\n                    showLegend: jsonResponse.showLegend\r\n                })\r\n                console.log(\"fetch was done\")\r\n                console.log(this.state)\r\n            })\r\n            .catch(function(error) {\r\n                console.log('There has been a problem with your fetch operation: ' + error.message);\r\n                throw error;\r\n            })\r\n\r\n        this.setState({dataFetched: true})\r\n    }\r\n\r\n    render() {\r\n        console.log(\"this in render before return\")\r\n        console.log(this.state)\r\n        console.log(\"this is the props\")\r\n        console.log(this.props)\r\n\r\n        var  chartData = {\r\n            labels: ['Boston', 'Worcester', 'Springfield', 'Lowell', 'Cambridge', 'New Bedford'],\r\n            datasets:[\r\n                {\r\n                    label:'Population',\r\n                    data:[\r\n                        617594,\r\n                        181045,\r\n                        153060,\r\n                        106519,\r\n                        105162,\r\n                        95072\r\n                    ],\r\n                    backgroundColor:[\r\n                        'rgba(255, 99, 132, 0.6)',\r\n                        'rgba(54, 162, 235, 0.6)',\r\n                        'rgba(255, 206, 86, 0.6)',\r\n                        'rgba(75, 192, 192, 0.6)',\r\n                        'rgba(153, 102, 255, 0.6)',\r\n                        'rgba(255, 159, 64, 0.6)',\r\n                        'rgba(255, 99, 132, 0.6)'\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n\r\n        if(this.state.dataFetched === false)\r\n            return(\r\n                <div>Loading...</div>\r\n            )\r\n\r\n        if(this.state.dataFetched === true)\r\n            return(\r\n                <div style={{textAlign: 'center', alignContent:'center', paddingTop: '130px'}}>\r\n                    <BarGraph\r\n                        chartData = {chartData}\r\n                        title = {this.state.title}\r\n                        xAxisLabel = {this.state.xAxisLabel}\r\n                        yAxisLabel = {this.state.yAxisLabel}\r\n                        showLegend = {this.state.showLegend}\r\n                        legedPosition = {this.state.legendPosition}\r\n                    />\r\n                </div>\r\n            )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}