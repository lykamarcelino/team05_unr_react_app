{"ast":null,"code":"/*!\r\n * split-string <https://github.com/jonschlinkert/split-string>\r\n *\r\n * Copyright (c) 2015-2017, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\n'use strict';\n\nvar extend = require('extend-shallow');\n\nmodule.exports = function (str, options, fn) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  } // allow separator to be defined as a string\n\n\n  if (typeof options === 'string') {\n    options = {\n      sep: options\n    };\n  }\n\n  var opts = extend({\n    sep: '.'\n  }, options);\n  var quotes = opts.quotes || ['\"', \"'\", '`'];\n  var brackets;\n\n  if (opts.brackets === true) {\n    brackets = {\n      '<': '>',\n      '(': ')',\n      '[': ']',\n      '{': '}'\n    };\n  } else if (opts.brackets) {\n    brackets = opts.brackets;\n  }\n\n  var tokens = [];\n  var stack = [];\n  var arr = [''];\n  var sep = opts.sep;\n  var len = str.length;\n  var idx = -1;\n  var closeIdx;\n\n  function expected() {\n    if (brackets && stack.length) {\n      return brackets[stack[stack.length - 1]];\n    }\n  }\n\n  while (++idx < len) {\n    var ch = str[idx];\n    var next = str[idx + 1];\n    var tok = {\n      val: ch,\n      idx: idx,\n      arr: arr,\n      str: str\n    };\n    tokens.push(tok);\n\n    if (ch === '\\\\') {\n      tok.val = keepEscaping(opts, str, idx) === true ? ch + next : next;\n      tok.escaped = true;\n\n      if (typeof fn === 'function') {\n        fn(tok);\n      }\n\n      arr[arr.length - 1] += tok.val;\n      idx++;\n      continue;\n    }\n\n    if (brackets && brackets[ch]) {\n      stack.push(ch);\n      var e = expected();\n      var i = idx + 1;\n\n      if (str.indexOf(e, i + 1) !== -1) {\n        while (stack.length && i < len) {\n          var s = str[++i];\n\n          if (s === '\\\\') {\n            s++;\n            continue;\n          }\n\n          if (quotes.indexOf(s) !== -1) {\n            i = getClosingQuote(str, s, i + 1);\n            continue;\n          }\n\n          e = expected();\n\n          if (stack.length && str.indexOf(e, i + 1) === -1) {\n            break;\n          }\n\n          if (brackets[s]) {\n            stack.push(s);\n            continue;\n          }\n\n          if (e === s) {\n            stack.pop();\n          }\n        }\n      }\n\n      closeIdx = i;\n\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n\n      ch = str.slice(idx, closeIdx + 1);\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n\n    if (quotes.indexOf(ch) !== -1) {\n      closeIdx = getClosingQuote(str, ch, idx + 1);\n\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n\n      if (keepQuotes(ch, opts) === true) {\n        ch = str.slice(idx, closeIdx + 1);\n      } else {\n        ch = str.slice(idx + 1, closeIdx);\n      }\n\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n\n    if (typeof fn === 'function') {\n      fn(tok, tokens);\n      ch = tok.val;\n      idx = tok.idx;\n    }\n\n    if (tok.val === sep && tok.split !== false) {\n      arr.push('');\n      continue;\n    }\n\n    arr[arr.length - 1] += tok.val;\n  }\n\n  return arr;\n};\n\nfunction getClosingQuote(str, ch, i, brackets) {\n  var idx = str.indexOf(ch, i);\n\n  if (str.charAt(idx - 1) === '\\\\') {\n    return getClosingQuote(str, ch, idx + 1);\n  }\n\n  return idx;\n}\n\nfunction keepQuotes(ch, opts) {\n  if (opts.keepDoubleQuotes === true && ch === '\"') return true;\n  if (opts.keepSingleQuotes === true && ch === \"'\") return true;\n  return opts.keepQuotes;\n}\n\nfunction keepEscaping(opts, str, idx) {\n  if (typeof opts.keepEscaping === 'function') {\n    return opts.keepEscaping(str, idx);\n  }\n\n  return opts.keepEscaping === true || str[idx + 1] === '\\\\';\n}","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/split-string/index.js"],"names":["extend","require","module","exports","str","options","fn","TypeError","sep","opts","quotes","brackets","tokens","stack","arr","len","length","idx","closeIdx","expected","ch","next","tok","val","push","keepEscaping","escaped","e","i","indexOf","s","getClosingQuote","pop","slice","keepQuotes","split","charAt","keepDoubleQuotes","keepSingleQuotes"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,OAAd,EAAuBC,EAAvB,EAA2B;AAC1C,MAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIG,SAAJ,CAAc,mBAAd,CAAN;AACD;;AAED,MAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,EAAE,GAAGD,OAAL;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD,GARyC,CAU1C;;;AACA,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAG;AAAEG,MAAAA,GAAG,EAAEH;AAAP,KAAV;AACD;;AAED,MAAII,IAAI,GAAGT,MAAM,CAAC;AAACQ,IAAAA,GAAG,EAAE;AAAN,GAAD,EAAaH,OAAb,CAAjB;AACA,MAAIK,MAAM,GAAGD,IAAI,CAACC,MAAL,IAAe,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA5B;AACA,MAAIC,QAAJ;;AAEA,MAAIF,IAAI,CAACE,QAAL,KAAkB,IAAtB,EAA4B;AAC1BA,IAAAA,QAAQ,GAAG;AACT,WAAK,GADI;AAET,WAAK,GAFI;AAGT,WAAK,GAHI;AAIT,WAAK;AAJI,KAAX;AAMD,GAPD,MAOO,IAAIF,IAAI,CAACE,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,GAAGF,IAAI,CAACE,QAAhB;AACD;;AAED,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,GAAG,GAAG,CAAC,EAAD,CAAV;AACA,MAAIN,GAAG,GAAGC,IAAI,CAACD,GAAf;AACA,MAAIO,GAAG,GAAGX,GAAG,CAACY,MAAd;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,QAAJ;;AAEA,WAASC,QAAT,GAAoB;AAClB,QAAIR,QAAQ,IAAIE,KAAK,CAACG,MAAtB,EAA8B;AAC5B,aAAOL,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,CAAf;AACD;AACF;;AAED,SAAO,EAAEC,GAAF,GAAQF,GAAf,EAAoB;AAClB,QAAIK,EAAE,GAAGhB,GAAG,CAACa,GAAD,CAAZ;AACA,QAAII,IAAI,GAAGjB,GAAG,CAACa,GAAG,GAAG,CAAP,CAAd;AACA,QAAIK,GAAG,GAAG;AAAEC,MAAAA,GAAG,EAAEH,EAAP;AAAWH,MAAAA,GAAG,EAAEA,GAAhB;AAAqBH,MAAAA,GAAG,EAAEA,GAA1B;AAA+BV,MAAAA,GAAG,EAAEA;AAApC,KAAV;AACAQ,IAAAA,MAAM,CAACY,IAAP,CAAYF,GAAZ;;AAEA,QAAIF,EAAE,KAAK,IAAX,EAAiB;AACfE,MAAAA,GAAG,CAACC,GAAJ,GAAUE,YAAY,CAAChB,IAAD,EAAOL,GAAP,EAAYa,GAAZ,CAAZ,KAAiC,IAAjC,GAAyCG,EAAE,GAAGC,IAA9C,GAAsDA,IAAhE;AACAC,MAAAA,GAAG,CAACI,OAAJ,GAAc,IAAd;;AACA,UAAI,OAAOpB,EAAP,KAAc,UAAlB,EAA8B;AAC5BA,QAAAA,EAAE,CAACgB,GAAD,CAAF;AACD;;AACDR,MAAAA,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,IAAuBM,GAAG,CAACC,GAA3B;AACAN,MAAAA,GAAG;AACH;AACD;;AAED,QAAIN,QAAQ,IAAIA,QAAQ,CAACS,EAAD,CAAxB,EAA8B;AAC5BP,MAAAA,KAAK,CAACW,IAAN,CAAWJ,EAAX;AACA,UAAIO,CAAC,GAAGR,QAAQ,EAAhB;AACA,UAAIS,CAAC,GAAGX,GAAG,GAAG,CAAd;;AAEA,UAAIb,GAAG,CAACyB,OAAJ,CAAYF,CAAZ,EAAeC,CAAC,GAAG,CAAnB,MAA0B,CAAC,CAA/B,EAAkC;AAChC,eAAOf,KAAK,CAACG,MAAN,IAAgBY,CAAC,GAAGb,GAA3B,EAAgC;AAC9B,cAAIe,CAAC,GAAG1B,GAAG,CAAC,EAAEwB,CAAH,CAAX;;AACA,cAAIE,CAAC,KAAK,IAAV,EAAgB;AACdA,YAAAA,CAAC;AACD;AACD;;AAED,cAAIpB,MAAM,CAACmB,OAAP,CAAeC,CAAf,MAAsB,CAAC,CAA3B,EAA8B;AAC5BF,YAAAA,CAAC,GAAGG,eAAe,CAAC3B,GAAD,EAAM0B,CAAN,EAASF,CAAC,GAAG,CAAb,CAAnB;AACA;AACD;;AAEDD,UAAAA,CAAC,GAAGR,QAAQ,EAAZ;;AACA,cAAIN,KAAK,CAACG,MAAN,IAAgBZ,GAAG,CAACyB,OAAJ,CAAYF,CAAZ,EAAeC,CAAC,GAAG,CAAnB,MAA0B,CAAC,CAA/C,EAAkD;AAChD;AACD;;AAED,cAAIjB,QAAQ,CAACmB,CAAD,CAAZ,EAAiB;AACfjB,YAAAA,KAAK,CAACW,IAAN,CAAWM,CAAX;AACA;AACD;;AAED,cAAIH,CAAC,KAAKG,CAAV,EAAa;AACXjB,YAAAA,KAAK,CAACmB,GAAN;AACD;AACF;AACF;;AAEDd,MAAAA,QAAQ,GAAGU,CAAX;;AACA,UAAIV,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBJ,QAAAA,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,IAAuBI,EAAvB;AACA;AACD;;AAEDA,MAAAA,EAAE,GAAGhB,GAAG,CAAC6B,KAAJ,CAAUhB,GAAV,EAAeC,QAAQ,GAAG,CAA1B,CAAL;AACAI,MAAAA,GAAG,CAACC,GAAJ,GAAUH,EAAV;AACAE,MAAAA,GAAG,CAACL,GAAJ,GAAUA,GAAG,GAAGC,QAAhB;AACD;;AAED,QAAIR,MAAM,CAACmB,OAAP,CAAeT,EAAf,MAAuB,CAAC,CAA5B,EAA+B;AAC7BF,MAAAA,QAAQ,GAAGa,eAAe,CAAC3B,GAAD,EAAMgB,EAAN,EAAUH,GAAG,GAAG,CAAhB,CAA1B;;AACA,UAAIC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBJ,QAAAA,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,IAAuBI,EAAvB;AACA;AACD;;AAED,UAAIc,UAAU,CAACd,EAAD,EAAKX,IAAL,CAAV,KAAyB,IAA7B,EAAmC;AACjCW,QAAAA,EAAE,GAAGhB,GAAG,CAAC6B,KAAJ,CAAUhB,GAAV,EAAeC,QAAQ,GAAG,CAA1B,CAAL;AACD,OAFD,MAEO;AACLE,QAAAA,EAAE,GAAGhB,GAAG,CAAC6B,KAAJ,CAAUhB,GAAG,GAAG,CAAhB,EAAmBC,QAAnB,CAAL;AACD;;AAEDI,MAAAA,GAAG,CAACC,GAAJ,GAAUH,EAAV;AACAE,MAAAA,GAAG,CAACL,GAAJ,GAAUA,GAAG,GAAGC,QAAhB;AACD;;AAED,QAAI,OAAOZ,EAAP,KAAc,UAAlB,EAA8B;AAC5BA,MAAAA,EAAE,CAACgB,GAAD,EAAMV,MAAN,CAAF;AACAQ,MAAAA,EAAE,GAAGE,GAAG,CAACC,GAAT;AACAN,MAAAA,GAAG,GAAGK,GAAG,CAACL,GAAV;AACD;;AAED,QAAIK,GAAG,CAACC,GAAJ,KAAYf,GAAZ,IAAmBc,GAAG,CAACa,KAAJ,KAAc,KAArC,EAA4C;AAC1CrB,MAAAA,GAAG,CAACU,IAAJ,CAAS,EAAT;AACA;AACD;;AAEDV,IAAAA,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,IAAuBM,GAAG,CAACC,GAA3B;AACD;;AAED,SAAOT,GAAP;AACD,CA1ID;;AA4IA,SAASiB,eAAT,CAAyB3B,GAAzB,EAA8BgB,EAA9B,EAAkCQ,CAAlC,EAAqCjB,QAArC,EAA+C;AAC7C,MAAIM,GAAG,GAAGb,GAAG,CAACyB,OAAJ,CAAYT,EAAZ,EAAgBQ,CAAhB,CAAV;;AACA,MAAIxB,GAAG,CAACgC,MAAJ,CAAWnB,GAAG,GAAG,CAAjB,MAAwB,IAA5B,EAAkC;AAChC,WAAOc,eAAe,CAAC3B,GAAD,EAAMgB,EAAN,EAAUH,GAAG,GAAG,CAAhB,CAAtB;AACD;;AACD,SAAOA,GAAP;AACD;;AAED,SAASiB,UAAT,CAAoBd,EAApB,EAAwBX,IAAxB,EAA8B;AAC5B,MAAIA,IAAI,CAAC4B,gBAAL,KAA0B,IAA1B,IAAkCjB,EAAE,KAAK,GAA7C,EAAkD,OAAO,IAAP;AAClD,MAAIX,IAAI,CAAC6B,gBAAL,KAA0B,IAA1B,IAAkClB,EAAE,KAAK,GAA7C,EAAkD,OAAO,IAAP;AAClD,SAAOX,IAAI,CAACyB,UAAZ;AACD;;AAED,SAAST,YAAT,CAAsBhB,IAAtB,EAA4BL,GAA5B,EAAiCa,GAAjC,EAAsC;AACpC,MAAI,OAAOR,IAAI,CAACgB,YAAZ,KAA6B,UAAjC,EAA6C;AAC3C,WAAOhB,IAAI,CAACgB,YAAL,CAAkBrB,GAAlB,EAAuBa,GAAvB,CAAP;AACD;;AACD,SAAOR,IAAI,CAACgB,YAAL,KAAsB,IAAtB,IAA8BrB,GAAG,CAACa,GAAG,GAAG,CAAP,CAAH,KAAiB,IAAtD;AACD","sourcesContent":["/*!\r\n * split-string <https://github.com/jonschlinkert/split-string>\r\n *\r\n * Copyright (c) 2015-2017, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\r\n\r\n'use strict';\r\n\r\nvar extend = require('extend-shallow');\r\n\r\nmodule.exports = function(str, options, fn) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('expected a string');\r\n  }\r\n\r\n  if (typeof options === 'function') {\r\n    fn = options;\r\n    options = null;\r\n  }\r\n\r\n  // allow separator to be defined as a string\r\n  if (typeof options === 'string') {\r\n    options = { sep: options };\r\n  }\r\n\r\n  var opts = extend({sep: '.'}, options);\r\n  var quotes = opts.quotes || ['\"', \"'\", '`'];\r\n  var brackets;\r\n\r\n  if (opts.brackets === true) {\r\n    brackets = {\r\n      '<': '>',\r\n      '(': ')',\r\n      '[': ']',\r\n      '{': '}'\r\n    };\r\n  } else if (opts.brackets) {\r\n    brackets = opts.brackets;\r\n  }\r\n\r\n  var tokens = [];\r\n  var stack = [];\r\n  var arr = [''];\r\n  var sep = opts.sep;\r\n  var len = str.length;\r\n  var idx = -1;\r\n  var closeIdx;\r\n\r\n  function expected() {\r\n    if (brackets && stack.length) {\r\n      return brackets[stack[stack.length - 1]];\r\n    }\r\n  }\r\n\r\n  while (++idx < len) {\r\n    var ch = str[idx];\r\n    var next = str[idx + 1];\r\n    var tok = { val: ch, idx: idx, arr: arr, str: str };\r\n    tokens.push(tok);\r\n\r\n    if (ch === '\\\\') {\r\n      tok.val = keepEscaping(opts, str, idx) === true ? (ch + next) : next;\r\n      tok.escaped = true;\r\n      if (typeof fn === 'function') {\r\n        fn(tok);\r\n      }\r\n      arr[arr.length - 1] += tok.val;\r\n      idx++;\r\n      continue;\r\n    }\r\n\r\n    if (brackets && brackets[ch]) {\r\n      stack.push(ch);\r\n      var e = expected();\r\n      var i = idx + 1;\r\n\r\n      if (str.indexOf(e, i + 1) !== -1) {\r\n        while (stack.length && i < len) {\r\n          var s = str[++i];\r\n          if (s === '\\\\') {\r\n            s++;\r\n            continue;\r\n          }\r\n\r\n          if (quotes.indexOf(s) !== -1) {\r\n            i = getClosingQuote(str, s, i + 1);\r\n            continue;\r\n          }\r\n\r\n          e = expected();\r\n          if (stack.length && str.indexOf(e, i + 1) === -1) {\r\n            break;\r\n          }\r\n\r\n          if (brackets[s]) {\r\n            stack.push(s);\r\n            continue;\r\n          }\r\n\r\n          if (e === s) {\r\n            stack.pop();\r\n          }\r\n        }\r\n      }\r\n\r\n      closeIdx = i;\r\n      if (closeIdx === -1) {\r\n        arr[arr.length - 1] += ch;\r\n        continue;\r\n      }\r\n\r\n      ch = str.slice(idx, closeIdx + 1);\r\n      tok.val = ch;\r\n      tok.idx = idx = closeIdx;\r\n    }\r\n\r\n    if (quotes.indexOf(ch) !== -1) {\r\n      closeIdx = getClosingQuote(str, ch, idx + 1);\r\n      if (closeIdx === -1) {\r\n        arr[arr.length - 1] += ch;\r\n        continue;\r\n      }\r\n\r\n      if (keepQuotes(ch, opts) === true) {\r\n        ch = str.slice(idx, closeIdx + 1);\r\n      } else {\r\n        ch = str.slice(idx + 1, closeIdx);\r\n      }\r\n\r\n      tok.val = ch;\r\n      tok.idx = idx = closeIdx;\r\n    }\r\n\r\n    if (typeof fn === 'function') {\r\n      fn(tok, tokens);\r\n      ch = tok.val;\r\n      idx = tok.idx;\r\n    }\r\n\r\n    if (tok.val === sep && tok.split !== false) {\r\n      arr.push('');\r\n      continue;\r\n    }\r\n\r\n    arr[arr.length - 1] += tok.val;\r\n  }\r\n\r\n  return arr;\r\n};\r\n\r\nfunction getClosingQuote(str, ch, i, brackets) {\r\n  var idx = str.indexOf(ch, i);\r\n  if (str.charAt(idx - 1) === '\\\\') {\r\n    return getClosingQuote(str, ch, idx + 1);\r\n  }\r\n  return idx;\r\n}\r\n\r\nfunction keepQuotes(ch, opts) {\r\n  if (opts.keepDoubleQuotes === true && ch === '\"') return true;\r\n  if (opts.keepSingleQuotes === true && ch === \"'\") return true;\r\n  return opts.keepQuotes;\r\n}\r\n\r\nfunction keepEscaping(opts, str, idx) {\r\n  if (typeof opts.keepEscaping === 'function') {\r\n    return opts.keepEscaping(str, idx);\r\n  }\r\n  return opts.keepEscaping === true || str[idx + 1] === '\\\\';\r\n}\r\n"]},"metadata":{},"sourceType":"script"}