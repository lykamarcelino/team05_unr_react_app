{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lykam\\\\Desktop\\\\Senior Project\\\\team05_react_app\\\\src\\\\Reports.js\";\nimport React from 'react';\nimport \"./App.css\"; //This file is being used to test being able to connect to a backend and fetching\n//It currently is not functioning\n//Render will have to be changed to render what is coming from getUser\n\nclass Reports extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8080/getUser\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result.items\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n\n    if (error) {\n      return React.createElement(\"error\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, items.map(item => React.createElement(\"li\", {\n        key: item.SyncToken,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, item.SyncToken)));\n    }\n  }\n\n}\n\nexport default Reports;","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/src/Reports.js"],"names":["React","Reports","Component","constructor","props","state","error","isLoaded","items","componentDidMount","fetch","then","res","json","result","setState","render","message","map","item","SyncToken"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH;;AACDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAGSG,MAAD,IAAY;AACR,WAAKC,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,KAAK,EAAEM,MAAM,CAACN;AAFJ,OAAd;AAIH,KART,EASSF,KAAD,IAAW;AACP,WAAKS,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAE,IADA;AAEVD,QAAAA;AAFU,OAAd;AAIH,KAdT;AAgBH;;AAEDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEV,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA6B,KAAKH,KAAxC;;AACA,QAAIC,KAAJ,EAAW;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACW,OAArB,CAAP;AACH,KAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,KAFM,MAEA;AACH,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKC,KAAK,CAACU,GAAN,CAAUC,IAAI,IACX;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACID,IAAI,CAACC,SADT,CADH,CADL,CADJ;AASH;AACJ;;AA7CgC;;AAiDrC,eAAenB,OAAf","sourcesContent":["import React from 'react';\r\nimport \"./App.css\"\r\n\r\n//This file is being used to test being able to connect to a backend and fetching\r\n//It currently is not functioning\r\n//Render will have to be changed to render what is coming from getUser\r\nclass Reports extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"http://localhost:8080/getUser\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result.items\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            return <error>Error: {error.message}</error>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <ul>\r\n                    {items.map(item => (\r\n                        <li key={item.SyncToken}>\r\n                           {item.SyncToken}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default Reports;\r\n"]},"metadata":{},"sourceType":"module"}