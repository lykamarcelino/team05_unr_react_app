{"ast":null,"code":"// Copyright 2014 Simon Lydell\n// X11 (“MIT”) Licensed. (See LICENSE.)\nvoid function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = factory();\n  } else {\n    root.sourceMappingURL = factory();\n  }\n}(this, function () {\n  var innerRegex = /[#@] sourceMappingURL=([^\\s'\"]*)/;\n  var regex = RegExp(\"(?:\" + \"/\\\\*\" + \"(?:\\\\s*\\r?\\n(?://)?)?\" + \"(?:\" + innerRegex.source + \")\" + \"\\\\s*\" + \"\\\\*/\" + \"|\" + \"//(?:\" + innerRegex.source + \")\" + \")\" + \"\\\\s*\");\n  return {\n    regex: regex,\n    _innerRegex: innerRegex,\n    getFrom: function (code) {\n      var match = code.match(regex);\n      return match ? match[1] || match[2] || \"\" : null;\n    },\n    existsIn: function (code) {\n      return regex.test(code);\n    },\n    removeFrom: function (code) {\n      return code.replace(regex, \"\");\n    },\n    insertBefore: function (code, string) {\n      var match = code.match(regex);\n\n      if (match) {\n        return code.slice(0, match.index) + string + code.slice(match.index);\n      } else {\n        return code + string;\n      }\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/lykam/Desktop/Senior Project/team05_react_app/node_modules/source-map-url/source-map-url.js"],"names":["root","factory","define","amd","exports","module","sourceMappingURL","innerRegex","regex","RegExp","source","_innerRegex","getFrom","code","match","existsIn","test","removeFrom","replace","insertBefore","string","slice","index"],"mappings":"AAAA;AACA;AAEA,KAAM,UAASA,IAAT,EAAeC,OAAf,EAAwB;AAC5B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9CD,IAAAA,MAAM,CAACD,OAAD,CAAN;AACD,GAFD,MAEO,IAAI,OAAOG,OAAP,KAAmB,QAAvB,EAAiC;AACtCC,IAAAA,MAAM,CAACD,OAAP,GAAiBH,OAAO,EAAxB;AACD,GAFM,MAEA;AACLD,IAAAA,IAAI,CAACM,gBAAL,GAAwBL,OAAO,EAA/B;AACD;AACF,CARK,CAQJ,IARI,EAQE,YAAW;AAEjB,MAAIM,UAAU,GAAG,kCAAjB;AAEA,MAAIC,KAAK,GAAGC,MAAM,CAChB,QACE,MADF,GAEE,uBAFF,GAGE,KAHF,GAGUF,UAAU,CAACG,MAHrB,GAG8B,GAH9B,GAIE,MAJF,GAKE,MALF,GAME,GANF,GAOE,OAPF,GAOYH,UAAU,CAACG,MAPvB,GAOgC,GAPhC,GAQA,GARA,GASA,MAVgB,CAAlB;AAaA,SAAO;AAELF,IAAAA,KAAK,EAAEA,KAFF;AAGLG,IAAAA,WAAW,EAAEJ,UAHR;AAKLK,IAAAA,OAAO,EAAE,UAASC,IAAT,EAAe;AACtB,UAAIC,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWN,KAAX,CAAZ;AACA,aAAQM,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAjB,IAAwB,EAA3B,GAAgC,IAA7C;AACD,KARI;AAULC,IAAAA,QAAQ,EAAE,UAASF,IAAT,EAAe;AACvB,aAAOL,KAAK,CAACQ,IAAN,CAAWH,IAAX,CAAP;AACD,KAZI;AAcLI,IAAAA,UAAU,EAAE,UAASJ,IAAT,EAAe;AACzB,aAAOA,IAAI,CAACK,OAAL,CAAaV,KAAb,EAAoB,EAApB,CAAP;AACD,KAhBI;AAkBLW,IAAAA,YAAY,EAAE,UAASN,IAAT,EAAeO,MAAf,EAAuB;AACnC,UAAIN,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWN,KAAX,CAAZ;;AACA,UAAIM,KAAJ,EAAW;AACT,eAAOD,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcP,KAAK,CAACQ,KAApB,IAA6BF,MAA7B,GAAsCP,IAAI,CAACQ,KAAL,CAAWP,KAAK,CAACQ,KAAjB,CAA7C;AACD,OAFD,MAEO;AACL,eAAOT,IAAI,GAAGO,MAAd;AACD;AACF;AAzBI,GAAP;AA4BD,CArDK,CAAN","sourcesContent":["// Copyright 2014 Simon Lydell\r\n// X11 (“MIT”) Licensed. (See LICENSE.)\r\n\r\nvoid (function(root, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    define(factory)\r\n  } else if (typeof exports === \"object\") {\r\n    module.exports = factory()\r\n  } else {\r\n    root.sourceMappingURL = factory()\r\n  }\r\n}(this, function() {\r\n\r\n  var innerRegex = /[#@] sourceMappingURL=([^\\s'\"]*)/\r\n\r\n  var regex = RegExp(\r\n    \"(?:\" +\r\n      \"/\\\\*\" +\r\n      \"(?:\\\\s*\\r?\\n(?://)?)?\" +\r\n      \"(?:\" + innerRegex.source + \")\" +\r\n      \"\\\\s*\" +\r\n      \"\\\\*/\" +\r\n      \"|\" +\r\n      \"//(?:\" + innerRegex.source + \")\" +\r\n    \")\" +\r\n    \"\\\\s*\"\r\n  )\r\n\r\n  return {\r\n\r\n    regex: regex,\r\n    _innerRegex: innerRegex,\r\n\r\n    getFrom: function(code) {\r\n      var match = code.match(regex)\r\n      return (match ? match[1] || match[2] || \"\" : null)\r\n    },\r\n\r\n    existsIn: function(code) {\r\n      return regex.test(code)\r\n    },\r\n\r\n    removeFrom: function(code) {\r\n      return code.replace(regex, \"\")\r\n    },\r\n\r\n    insertBefore: function(code, string) {\r\n      var match = code.match(regex)\r\n      if (match) {\r\n        return code.slice(0, match.index) + string + code.slice(match.index)\r\n      } else {\r\n        return code + string\r\n      }\r\n    }\r\n  }\r\n\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}